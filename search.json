[{"path":"https://blasbenito.github.io/collinear/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 collinear author Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://blasbenito.github.io/collinear/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Blas M. Benito. Author, maintainer, copyright holder.","code":""},{"path":"https://blasbenito.github.io/collinear/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Benito B (2023). “collinear: R Package Seamless Multicollinearity Management.” doi:10.5281/zenodo.10039489, https://blasbenito.github.io/collinear/.","code":"@Misc{,   title = {{collinear}: R Package for Seamless Multicollinearity Management},   author = {Blas M. Benito},   year = {2023},   url = {https://blasbenito.github.io/collinear/},   doi = {10.5281/zenodo.10039489}, }"},{"path":[]},{"path":"https://blasbenito.github.io/collinear/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Seamless Multicollinearity Management","text":"R package collinear combines four different methods offer comprehensive tool multicollinearity management: Pairwise correlation numeric categorical predictors: identification pairwise correlation via Pearson Spearman methods numeric predictors, Cramer’s V categorical predictors. Variance Inflation Factor analysis (VIF): identify multicollinearity resulting linear combinations predictors. Target encoding categorical predictors: transforms categorical predictors numeric using numeric variable response (usually response variable) handle numerics multicollinearity filtering. Variable prioritization: method prioritize predictors variable selection using expert knowledge quantitative criteria. methods integrated collinear() function, returns vector selected predictors user-defined level multicollinearity. package contains functions may useful multicollinearity management: cor_select(): like collinear(), using pairwise correlations. vif_select(): like collinear(), using variance inflation factors. preference_order(): compute preference order based univariate models. target_encoding_lab(): convert categorical predictors numeric using several methods. cor_df(): generate data frame pairwise correlation scores. cor_matrix(): convert correlation data frame matrix, obtain correlation matrix. vif_df(): obtain data frame variance inflation factors.","code":"selected_variables <- collinear(   df, #your data frame   response, #name of your response variable   predictors, #names of your predictors,   preference_order, #your predictors in order of interest   max_cor, #maximum bivariate correlation   max_vif, #maximum variance inflation factor   encoding_method, #method to convert categorical predictors into numerics )"},{"path":"https://blasbenito.github.io/collinear/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Seamless Multicollinearity Management","text":"found package useful research work, please cite : Blas M. Benito (2023). collinear: R Package Seamless Multicollinearity Management. Version 1.0.1. doi: 10.5281/zenodo.10039489","code":""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Seamless Multicollinearity Management","text":"package collinear can installed CRAN. development version can installed GitHub.","code":"install.packages(\"collinear\") library(collinear) remotes::install_github(   repo = \"blasbenito/collinear\",    ref = \"development\"   )"},{"path":"https://blasbenito.github.io/collinear/index.html","id":"multicollinearity-management-with-the-collinear-package","dir":"","previous_headings":"","what":"Multicollinearity management with the collinear package.","title":"Seamless Multicollinearity Management","text":"section shows basic usage package offers brief explanation methods used within.","code":""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"required-libraries-and-example-data","dir":"","previous_headings":"Multicollinearity management with the collinear package.","what":"Required libraries and example data","title":"Seamless Multicollinearity Management","text":"libraries required run examples section. package collinear shipped data frame named vi, 30.000 rows 67 columns mixture numeric categorical variables. response variables “vi_mean”, “vi_max”, “vi_min”, “vi_range”, statistics vegetation index named NDVI. predictors stored character vector vi_predictors.","code":"library(collinear) library(dplyr) library(tictoc) dplyr::glimpse(vi) #> Rows: 30,000 #> Columns: 68 #> $ longitude                  <dbl> -114.254306, 114.845693, -122.145972, 108.3… #> $ latitude                   <dbl> 45.0540272, 26.2706940, 56.3790272, 29.9456… #> $ vi_mean                    <dbl> 0.38, 0.53, 0.45, 0.69, 0.42, 0.68, 0.70, 0… #> $ vi_max                     <dbl> 0.57, 0.67, 0.65, 0.85, 0.64, 0.78, 0.77, 0… #> $ vi_min                     <dbl> 0.12, 0.41, 0.25, 0.50, 0.25, 0.48, 0.60, 0… #> $ vi_range                   <dbl> 0.45, 0.26, 0.40, 0.34, 0.39, 0.31, 0.17, 0… #> $ vi_binary                  <dbl> 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0… #> $ koppen_zone                <chr> \"BSk\", \"Cfa\", \"Dfc\", \"Cfb\", \"Aw\", \"Cfa\", \"A… #> $ koppen_group               <chr> \"Arid\", \"Temperate\", \"Cold\", \"Temperate\", \"… #> $ koppen_description         <chr> \"steppe, cold\", \"no dry season, hot summer\"… #> $ soil_type                  <chr> \"Cambisols\", \"Acrisols\", \"Luvisols\", \"Aliso… #> $ topo_slope                 <int> 6, 2, 0, 10, 0, 10, 6, 0, 2, 0, 0, 1, 0, 1,… #> $ topo_diversity             <int> 29, 24, 21, 25, 19, 30, 26, 20, 26, 22, 25,… #> $ topo_elevation             <int> 1821, 143, 765, 1474, 378, 485, 604, 1159, … #> $ swi_mean                   <dbl> 27.5, 56.1, 41.4, 59.3, 37.4, 56.3, 52.3, 2… #> $ swi_max                    <dbl> 62.9, 74.4, 81.9, 81.1, 83.2, 73.8, 55.8, 3… #> $ swi_min                    <dbl> 24.5, 33.3, 42.2, 31.3, 8.3, 28.8, 25.3, 11… #> $ swi_range                  <dbl> 38.4, 41.2, 39.7, 49.8, 74.9, 45.0, 30.5, 2… #> $ soil_temperature_mean      <dbl> 4.8, 19.9, 1.2, 13.0, 28.2, 18.1, 21.5, 23.… #> $ soil_temperature_max       <dbl> 29.9, 32.6, 20.4, 24.6, 41.6, 29.1, 26.4, 4… #> $ soil_temperature_min       <dbl> -12.4, 3.9, -16.0, -0.4, 16.8, 4.1, 17.3, 5… #> $ soil_temperature_range     <dbl> 42.3, 28.8, 36.4, 25.0, 24.8, 24.9, 9.1, 38… #> $ soil_sand                  <int> 41, 39, 27, 29, 48, 33, 30, 78, 23, 64, 54,… #> $ soil_clay                  <int> 20, 24, 28, 31, 27, 29, 40, 15, 26, 22, 23,… #> $ soil_silt                  <int> 38, 35, 43, 38, 23, 36, 29, 6, 49, 13, 22, … #> $ soil_ph                    <dbl> 6.5, 5.9, 5.6, 5.5, 6.5, 5.8, 5.2, 7.1, 7.3… #> $ soil_soc                   <dbl> 43.1, 14.6, 36.4, 34.9, 8.1, 20.8, 44.5, 4.… #> $ soil_nitrogen              <dbl> 2.8, 1.3, 2.9, 3.6, 1.2, 1.9, 2.8, 0.6, 3.1… #> $ solar_rad_mean             <dbl> 17.634, 19.198, 13.257, 14.163, 24.512, 17.… #> $ solar_rad_max              <dbl> 31.317, 24.498, 25.283, 17.237, 28.038, 22.… #> $ solar_rad_min              <dbl> 5.209, 13.311, 1.587, 9.642, 19.102, 12.196… #> $ solar_rad_range            <dbl> 26.108, 11.187, 23.696, 7.595, 8.936, 10.20… #> $ growing_season_length      <dbl> 139, 365, 164, 333, 228, 365, 365, 60, 365,… #> $ growing_season_temperature <dbl> 12.65, 19.35, 11.55, 12.45, 26.45, 17.75, 2… #> $ growing_season_rainfall    <dbl> 224.5, 1493.4, 345.4, 1765.5, 984.4, 1860.5… #> $ growing_degree_days        <dbl> 2140.5, 7080.9, 2053.2, 4162.9, 10036.7, 64… #> $ temperature_mean           <dbl> 3.65, 19.35, 1.45, 11.35, 27.55, 17.65, 22.… #> $ temperature_max            <dbl> 24.65, 33.35, 21.15, 23.75, 38.35, 30.55, 2… #> $ temperature_min            <dbl> -14.05, 3.05, -18.25, -3.55, 19.15, 2.45, 1… #> $ temperature_range          <dbl> 38.7, 30.3, 39.4, 27.3, 19.2, 28.1, 7.0, 29… #> $ temperature_seasonality    <dbl> 882.6, 786.6, 1070.9, 724.7, 219.3, 747.2, … #> $ rainfall_mean              <int> 446, 1493, 560, 1794, 990, 1860, 3150, 356,… #> $ rainfall_min               <int> 25, 37, 24, 29, 0, 60, 122, 1, 10, 12, 0, 0… #> $ rainfall_max               <int> 62, 209, 87, 293, 226, 275, 425, 62, 256, 3… #> $ rainfall_range             <int> 37, 172, 63, 264, 226, 215, 303, 61, 245, 2… #> $ evapotranspiration_mean    <dbl> 78.32, 105.88, 50.03, 64.65, 156.60, 108.50… #> $ evapotranspiration_max     <dbl> 164.70, 190.86, 117.53, 115.79, 187.71, 191… #> $ evapotranspiration_min     <dbl> 13.67, 50.44, 3.53, 28.01, 128.59, 51.39, 8… #> $ evapotranspiration_range   <dbl> 151.03, 140.42, 113.99, 87.79, 59.13, 139.9… #> $ cloud_cover_mean           <int> 31, 48, 42, 64, 38, 52, 60, 13, 53, 20, 11,… #> $ cloud_cover_max            <int> 39, 61, 49, 71, 58, 67, 77, 18, 60, 27, 23,… #> $ cloud_cover_min            <int> 16, 34, 33, 54, 19, 39, 45, 6, 45, 14, 2, 1… #> $ cloud_cover_range          <int> 23, 27, 15, 17, 38, 27, 32, 11, 15, 12, 21,… #> $ aridity_index              <dbl> 0.54, 1.27, 0.90, 2.08, 0.55, 1.67, 2.88, 0… #> $ humidity_mean              <dbl> 55.56, 62.14, 59.87, 69.32, 51.60, 62.76, 7… #> $ humidity_max               <dbl> 63.98, 65.00, 68.19, 71.90, 67.07, 65.68, 7… #> $ humidity_min               <dbl> 48.41, 58.97, 53.75, 67.21, 33.89, 59.92, 7… #> $ humidity_range             <dbl> 15.57, 6.03, 14.44, 4.69, 33.18, 5.76, 3.99… #> $ biogeo_ecoregion           <chr> \"South Central Rockies forests\", \"Jian Nan … #> $ biogeo_biome               <chr> \"Temperate Conifer Forests\", \"Tropical & Su… #> $ biogeo_realm               <chr> \"Nearctic\", \"Indomalayan\", \"Nearctic\", \"Pal… #> $ country_name               <chr> \"United States of America\", \"China\", \"Canad… #> $ country_population         <dbl> 313973000, 1338612970, 33487208, 1338612970… #> $ country_gdp                <dbl> 15094000, 7973000, 1300000, 7973000, 15860,… #> $ country_income             <chr> \"1. High income: OECD\", \"3. Upper middle in… #> $ continent                  <chr> \"North America\", \"Asia\", \"North America\", \"… #> $ region                     <chr> \"Americas\", \"Asia\", \"Americas\", \"Asia\", \"Af… #> $ subregion                  <chr> \"Northern America\", \"Eastern Asia\", \"Northe… vi_predictors #>  [1] \"koppen_zone\"                \"koppen_group\"               #>  [3] \"koppen_description\"         \"soil_type\"                  #>  [5] \"topo_slope\"                 \"topo_diversity\"             #>  [7] \"topo_elevation\"             \"swi_mean\"                   #>  [9] \"swi_max\"                    \"swi_min\"                    #> [11] \"swi_range\"                  \"soil_temperature_mean\"      #> [13] \"soil_temperature_max\"       \"soil_temperature_min\"       #> [15] \"soil_temperature_range\"     \"soil_sand\"                  #> [17] \"soil_clay\"                  \"soil_silt\"                  #> [19] \"soil_ph\"                    \"soil_soc\"                   #> [21] \"soil_nitrogen\"              \"solar_rad_mean\"             #> [23] \"solar_rad_max\"              \"solar_rad_min\"              #> [25] \"solar_rad_range\"            \"growing_season_length\"      #> [27] \"growing_season_temperature\" \"growing_season_rainfall\"    #> [29] \"growing_degree_days\"        \"temperature_mean\"           #> [31] \"temperature_max\"            \"temperature_min\"            #> [33] \"temperature_range\"          \"temperature_seasonality\"    #> [35] \"rainfall_mean\"              \"rainfall_min\"               #> [37] \"rainfall_max\"               \"rainfall_range\"             #> [39] \"evapotranspiration_mean\"    \"evapotranspiration_max\"     #> [41] \"evapotranspiration_min\"     \"evapotranspiration_range\"   #> [43] \"cloud_cover_mean\"           \"cloud_cover_max\"            #> [45] \"cloud_cover_min\"            \"cloud_cover_range\"          #> [47] \"aridity_index\"              \"humidity_mean\"              #> [49] \"humidity_max\"               \"humidity_min\"               #> [51] \"humidity_range\"             \"biogeo_ecoregion\"           #> [53] \"biogeo_biome\"               \"biogeo_realm\"               #> [55] \"country_name\"               \"country_population\"         #> [57] \"country_gdp\"                \"country_income\"             #> [59] \"continent\"                  \"region\"                     #> [61] \"subregion\""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"collinear","dir":"","previous_headings":"Multicollinearity management with the collinear package.","what":"collinear()","title":"Seamless Multicollinearity Management","text":"collinear() function applies multicollinearity filtering numeric categorical variables via pairwise correlations (cor_select()) variance inflation factors (vif_select()). Categorical variables converted numeric via target-encoding (target_encoding_lab()) using response variable reference. response variable provided, categorical variables ignored.","code":""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"input-arguments","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear()","what":"Input arguments","title":"Seamless Multicollinearity Management","text":"function takes inputs: df: data frame predictors, preferably, response (later). response: name response variable, relevant highly recommended categorical variables within predictors. predictors: names predictors involved multicollinearity analysis. preference_order: names predictors user’s order preference. need name predictors predictors! cor_method: usually “pearson”, also “spearman” accepted. max_cor: maximum correlation allowed two predictors. max_vif: maximum VIF allowed predictor. encoding_method: method used convert categorical variables numeric. relevant response provided. default, group categorical variable encoded mean response across group. code shows quick example. Notice argument preference_order left NULL, explained later. function returned list predictors correlation lower 0.75 , VIF lower 5. Let’s see ’s true. function cor_df() returns data frame pairwise correlations, arranged absolute value correlation. data frame shows maximum correlation two selected predictors 0.75, collinear() worked expected. function vif_df() returns data frame VIF scores predictors. output shows maximum VIF 4.2, collinear() work expected.","code":"selected_predictors <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = NULL,   max_cor = 0.75,   max_vif = 5,   encoding_method = \"mean\" )  selected_predictors #>  [1] \"country_income\"             \"topo_diversity\"             #>  [3] \"topo_slope\"                 \"country_population\"         #>  [5] \"country_gdp\"                \"humidity_range\"             #>  [7] \"soil_soc\"                   \"region\"                     #>  [9] \"soil_clay\"                  \"soil_type\"                  #> [11] \"subregion\"                  \"biogeo_realm\"               #> [13] \"soil_sand\"                  \"topo_elevation\"             #> [15] \"soil_nitrogen\"              \"swi_range\"                  #> [17] \"koppen_group\"               \"swi_min\"                    #> [19] \"solar_rad_max\"              \"rainfall_min\"               #> [21] \"growing_season_temperature\" \"rainfall_range\"             #> [23] \"solar_rad_min\"              \"cloud_cover_range\" selected_predictors_cor <- cor_df(   df = vi,   response = \"vi_mean\",   predictors = selected_predictors ) head(selected_predictors_cor) #> # A tibble: 6 × 3 #>   x             y                          correlation #>   <chr>         <chr>                            <dbl> #> 1 solar_rad_min growing_season_temperature       0.744 #> 2 koppen_group  soil_type                        0.732 #> 3 soil_nitrogen soil_soc                         0.729 #> 4 swi_min       soil_nitrogen                    0.673 #> 5 soil_sand     soil_clay                       -0.666 #> 6 koppen_group  swi_range                        0.659 selected_predictors_vif <- vif_df(   df = vi,   response = \"vi_mean\",   predictors = selected_predictors ) selected_predictors_vif #>                      variable   vif #> 1              country_income 1.215 #> 2              topo_diversity 1.662 #> 3                  topo_slope 1.929 #> 4              humidity_range 2.043 #> 5              topo_elevation 2.101 #> 6                 country_gdp 2.158 #> 7          country_population 2.171 #> 8                rainfall_min 2.269 #> 9           cloud_cover_range 2.418 #> 10                   soil_soc 2.744 #> 11                     region 2.849 #> 12             rainfall_range 2.876 #> 13                  subregion 2.900 #> 14                  soil_clay 2.966 #> 15                  soil_type 2.991 #> 16              solar_rad_max 3.145 #> 17               biogeo_realm 3.150 #> 18                  soil_sand 3.175 #> 19              soil_nitrogen 3.376 #> 20                    swi_min 3.450 #> 21                  swi_range 3.781 #> 22               koppen_group 4.151 #> 23 growing_season_temperature 4.314 #> 24              solar_rad_min 4.432"},{"path":"https://blasbenito.github.io/collinear/index.html","id":"arguments-max_cor-and-max_vif","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear()","what":"Arguments max_cor and max_vif","title":"Seamless Multicollinearity Management","text":"arguments max_cor max_vif control intensity multicollinearity filtering. variables selected restrictive setup: variables selected permissive setup: expected, restrictive setup resulted smaller set selected predictors. hard rules max_cor max_vif, selection depend objective analysis nature predictors.","code":"#restrictive setup selected_predictors_restrictive <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_cor = 0.5,   max_vif = 2.5 )  #permissive setup selected_predictors_permissive <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_cor = 0.9,   max_vif = 10 ) selected_predictors_restrictive #>  [1] \"country_income\"             \"soil_clay\"                  #>  [3] \"country_population\"         \"topo_slope\"                 #>  [5] \"humidity_range\"             \"topo_elevation\"             #>  [7] \"soil_soc\"                   \"soil_silt\"                  #>  [9] \"cloud_cover_range\"          \"region\"                     #> [11] \"solar_rad_max\"              \"growing_season_temperature\" #> [13] \"biogeo_realm\" selected_predictors_permissive #>  [1] \"country_income\"             \"topo_diversity\"             #>  [3] \"topo_slope\"                 \"country_population\"         #>  [5] \"country_gdp\"                \"soil_soc\"                   #>  [7] \"region\"                     \"soil_type\"                  #>  [9] \"soil_nitrogen\"              \"subregion\"                  #> [11] \"biogeo_realm\"               \"topo_elevation\"             #> [13] \"koppen_group\"               \"biogeo_biome\"               #> [15] \"country_name\"               \"soil_ph\"                    #> [17] \"aridity_index\"              \"growing_season_temperature\" #> [19] \"rainfall_min\"               \"rainfall_range\"             #> [21] \"swi_mean\"                   \"soil_temperature_max\"       #> [23] \"solar_rad_mean\"             \"temperature_seasonality\"    #> [25] \"soil_clay\"                  \"soil_silt\"                  #> [27] \"cloud_cover_min\"            \"swi_range\"                  #> [29] \"humidity_range\""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"the-response-argument","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear()","what":"The response argument","title":"Seamless Multicollinearity Management","text":"response argument used encode categorical variables numeric. omitted, collinear() function ignores categorical variables. However, function cor_select() can help suitable response variable data frame. option discussed end section. argument response used, output may contain categorical predictors (tagged <chr>, “character” ). However, argument response ignored, categorical predictors ignored. categorical variables data frame, suitable response variable, function cor_select() can handle multicollinearity management via pairwise correlations, MUCH higher computational cost, different results, shown . variable selection results differ numeric representations categorical variables rather different two options. response provided, function cor_select() compares categorical predictors numeric ones encoding categorical numeric, compares pairs categoricals using Cramer’s V, implemented function cramer_v(). Additionally, Cramer’s V values directly comparable Pearson Spearman correlation scores, together analysis might induce bias variable selection. using response argument always last option.","code":"selected_predictors_response <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors )  selected_predictors_no_response <- collinear(   df = vi,   predictors = vi_predictors ) dplyr::glimpse(vi[, selected_predictors_response]) #> Rows: 30,000 #> Columns: 24 #> $ country_income             <chr> \"1. High income: OECD\", \"3. Upper middle in… #> $ topo_diversity             <int> 29, 24, 21, 25, 19, 30, 26, 20, 26, 22, 25,… #> $ topo_slope                 <int> 6, 2, 0, 10, 0, 10, 6, 0, 2, 0, 0, 1, 0, 1,… #> $ country_population         <dbl> 313973000, 1338612970, 33487208, 1338612970… #> $ country_gdp                <dbl> 15094000, 7973000, 1300000, 7973000, 15860,… #> $ humidity_range             <dbl> 15.57, 6.03, 14.44, 4.69, 33.18, 5.76, 3.99… #> $ soil_soc                   <dbl> 43.1, 14.6, 36.4, 34.9, 8.1, 20.8, 44.5, 4.… #> $ region                     <chr> \"Americas\", \"Asia\", \"Americas\", \"Asia\", \"Af… #> $ soil_clay                  <int> 20, 24, 28, 31, 27, 29, 40, 15, 26, 22, 23,… #> $ soil_type                  <chr> \"Cambisols\", \"Acrisols\", \"Luvisols\", \"Aliso… #> $ subregion                  <chr> \"Northern America\", \"Eastern Asia\", \"Northe… #> $ biogeo_realm               <chr> \"Nearctic\", \"Indomalayan\", \"Nearctic\", \"Pal… #> $ soil_sand                  <int> 41, 39, 27, 29, 48, 33, 30, 78, 23, 64, 54,… #> $ topo_elevation             <int> 1821, 143, 765, 1474, 378, 485, 604, 1159, … #> $ soil_nitrogen              <dbl> 2.8, 1.3, 2.9, 3.6, 1.2, 1.9, 2.8, 0.6, 3.1… #> $ swi_range                  <dbl> 38.4, 41.2, 39.7, 49.8, 74.9, 45.0, 30.5, 2… #> $ koppen_group               <chr> \"Arid\", \"Temperate\", \"Cold\", \"Temperate\", \"… #> $ swi_min                    <dbl> 24.5, 33.3, 42.2, 31.3, 8.3, 28.8, 25.3, 11… #> $ solar_rad_max              <dbl> 31.317, 24.498, 25.283, 17.237, 28.038, 22.… #> $ rainfall_min               <int> 25, 37, 24, 29, 0, 60, 122, 1, 10, 12, 0, 0… #> $ growing_season_temperature <dbl> 12.65, 19.35, 11.55, 12.45, 26.45, 17.75, 2… #> $ rainfall_range             <int> 37, 172, 63, 264, 226, 215, 303, 61, 245, 2… #> $ solar_rad_min              <dbl> 5.209, 13.311, 1.587, 9.642, 19.102, 12.196… #> $ cloud_cover_range          <int> 23, 27, 15, 17, 38, 27, 32, 11, 15, 12, 21,… dplyr::glimpse(vi[, selected_predictors_no_response]) #> Rows: 30,000 #> Columns: 18 #> $ topo_diversity             <int> 29, 24, 21, 25, 19, 30, 26, 20, 26, 22, 25,… #> $ country_gdp                <dbl> 15094000, 7973000, 1300000, 7973000, 15860,… #> $ country_population         <dbl> 313973000, 1338612970, 33487208, 1338612970… #> $ topo_slope                 <int> 6, 2, 0, 10, 0, 10, 6, 0, 2, 0, 0, 1, 0, 1,… #> $ soil_soc                   <dbl> 43.1, 14.6, 36.4, 34.9, 8.1, 20.8, 44.5, 4.… #> $ soil_clay                  <int> 20, 24, 28, 31, 27, 29, 40, 15, 26, 22, 23,… #> $ soil_sand                  <int> 41, 39, 27, 29, 48, 33, 30, 78, 23, 64, 54,… #> $ soil_nitrogen              <dbl> 2.8, 1.3, 2.9, 3.6, 1.2, 1.9, 2.8, 0.6, 3.1… #> $ humidity_range             <dbl> 15.57, 6.03, 14.44, 4.69, 33.18, 5.76, 3.99… #> $ topo_elevation             <int> 1821, 143, 765, 1474, 378, 485, 604, 1159, … #> $ cloud_cover_range          <int> 23, 27, 15, 17, 38, 27, 32, 11, 15, 12, 21,… #> $ solar_rad_max              <dbl> 31.317, 24.498, 25.283, 17.237, 28.038, 22.… #> $ rainfall_min               <int> 25, 37, 24, 29, 0, 60, 122, 1, 10, 12, 0, 0… #> $ growing_season_temperature <dbl> 12.65, 19.35, 11.55, 12.45, 26.45, 17.75, 2… #> $ rainfall_range             <int> 37, 172, 63, 264, 226, 215, 303, 61, 245, 2… #> $ swi_range                  <dbl> 38.4, 41.2, 39.7, 49.8, 74.9, 45.0, 30.5, 2… #> $ solar_rad_min              <dbl> 5.209, 13.311, 1.587, 9.642, 19.102, 12.196… #> $ swi_min                    <dbl> 24.5, 33.3, 42.2, 31.3, 8.3, 28.8, 25.3, 11… tictoc::tic() selected_predictors_response <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors ) tictoc::toc() #> 2.144 sec elapsed  tictoc::tic() selected_predictors_no_response <- cor_select(   df = vi,   predictors = vi_predictors ) tictoc::toc() #> 1.591 sec elapsed selected_predictors_response #>  [1] \"country_population\"         \"topo_elevation\"             #>  [3] \"country_income\"             \"country_gdp\"                #>  [5] \"topo_slope\"                 \"humidity_range\"             #>  [7] \"soil_clay\"                  \"topo_diversity\"             #>  [9] \"soil_sand\"                  \"cloud_cover_range\"          #> [11] \"region\"                     \"growing_season_temperature\" #> [13] \"solar_rad_min\"              \"soil_soc\"                   #> [15] \"rainfall_min\"               \"swi_range\"                  #> [17] \"soil_nitrogen\"              \"rainfall_range\"             #> [19] \"temperature_max\"            \"swi_min\"                    #> [21] \"subregion\"                  \"temperature_seasonality\"    #> [23] \"biogeo_realm\"               \"cloud_cover_min\"            #> [25] \"soil_type\"                  \"aridity_index\"              #> [27] \"solar_rad_max\"              \"koppen_group\"               #> [29] \"cloud_cover_max\" selected_predictors_no_response #>  [1] \"country_population\"         \"topo_elevation\"             #>  [3] \"humidity_range\"             \"topo_slope\"                 #>  [5] \"country_gdp\"                \"soil_clay\"                  #>  [7] \"topo_diversity\"             \"soil_sand\"                  #>  [9] \"cloud_cover_range\"          \"rainfall_min\"               #> [11] \"soil_soc\"                   \"swi_range\"                  #> [13] \"growing_season_temperature\" \"solar_rad_min\"              #> [15] \"rainfall_range\"             \"soil_nitrogen\"              #> [17] \"swi_min\"                    \"temperature_max\"            #> [19] \"cloud_cover_min\"            \"temperature_seasonality\"    #> [21] \"aridity_index\"              \"solar_rad_max\"              #> [23] \"swi_mean\"                   \"humidity_max\""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"preference-order","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear()","what":"Preference order","title":"Seamless Multicollinearity Management","text":"argument preference_order gives user control predictors removed first predictors kept multicollinearity filtering. argument accepts vector predictor names order interest, result function preference_order(), allows define preference order following quantitative criteria.","code":""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"manual-preference-order","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear() > Preference order","what":"Manual preference order","title":"Seamless Multicollinearity Management","text":"Let’s start former option. , argument preference_order names several predictors importance hypothetical analysis. predictors preference_order ranked absolute sum correlations predictors pairwise correlation filtering, VIF VIF-based filtering. Notice output, two variables preference_order selected (“soil_temperature_mean” “soil_type”), one removed (“soil_temperature_max”). happens point selection, VIF “soil_temperature_mean” “soil_temperature_max” higher max_vif, one lower preference removed.","code":"selected_predictors <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = c(     \"soil_temperature_mean\",     \"soil_temperature_max\",     \"soil_type\"   ) )  selected_predictors #>  [1] \"soil_temperature_mean\"  \"soil_temperature_max\"   \"soil_type\"              #>  [4] \"country_population\"     \"topo_elevation\"         \"country_income\"         #>  [7] \"country_gdp\"            \"topo_slope\"             \"humidity_range\"         #> [10] \"soil_clay\"              \"topo_diversity\"         \"soil_sand\"              #> [13] \"cloud_cover_range\"      \"region\"                 \"soil_soc\"               #> [16] \"rainfall_min\"           \"solar_rad_range\"        \"swi_range\"              #> [19] \"soil_nitrogen\"          \"rainfall_range\"         \"subregion\"              #> [22] \"biogeo_realm\"           \"aridity_index\"          \"solar_rad_max\"          #> [25] \"koppen_group\"           \"soil_temperature_range\" \"cloud_cover_max\""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"quantitative-preference-order","dir":"","previous_headings":"Multicollinearity management with the collinear package. > collinear() > Preference order","what":"Quantitative preference order","title":"Seamless Multicollinearity Management","text":"function preference_order() requires response argument, takes function f returns value association response predictor. value located “preference” column function’s output. result preference_order() can plugged right away preference_order argument collinear. variable selection satisfies three conditions : maximum correlation predictor response, maximum pairwise correlation, maximum VIF. f argument used default function f_rsquared(), returns R-squared response predictor. several f functions implemented: f_gam_deviance(): returns explained deviance univariate GAM model response predictor, fitted function mgcv::gam(). R package mgcv installed system. f_rf_rsquared() (also named f_rf_deviance()): returns explained deviance univariate Random Forest model response predictor, fitted function ranger::ranger(). R package ranger installed system. f_logistic_auc_balanced() f_logistic_auc_unbalanced(): return area ROC curve univariate binomial GLM binary response 1s 0s numeric predictor. former assumes response balanced, latter applies case weights mitigate unbalances. f_gam_auc_balanced() f_gam_auc_unbalanced(): return area ROC curve univariate binomial GAM binary response 1s 0s numeric predictor. former assumes response balanced, latter applies case weights mitigate unbalances. f_rf_auc_balanced() f_rf_auc_unbalanced(): return area ROC curve univariate random forest models binary response 1s 0s numeric predictor. former assumes response balanced, latter applies case weights mitigate unbalances. Custom functions created user also accepted input, long x, y, df arguments, return single numeric value.","code":"#parallelization setup # future::plan( #   future::multisession, #   workers = 2 #set to parallelly::availableWorkers() - 1 # )  #progress bar #progressr::handlers(global = TRUE)  #compute preference order preference_rsquared <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rsquared, )  preference_rsquared #>                     predictor   preference #> 1            biogeo_ecoregion 0.8971347093 #> 2       growing_season_length 0.8076216576 #> 3                 koppen_zone 0.8050280970 #> 4          koppen_description 0.7903458680 #> 5                     soil_ph 0.7664428862 #> 6                    swi_mean 0.7286901614 #> 7               humidity_mean 0.7141389404 #> 8                koppen_group 0.6996959734 #> 9                biogeo_biome 0.6515724588 #> 10               country_name 0.6448346803 #> 11           cloud_cover_mean 0.6338773126 #> 12                  soil_type 0.6318025761 #> 13              rainfall_mean 0.6005761078 #> 14               humidity_max 0.5876622545 #> 15       soil_temperature_max 0.5827628810 #> 16                    swi_max 0.5813558512 #> 17            cloud_cover_max 0.5758002449 #> 18               humidity_min 0.5705720164 #> 19    growing_season_rainfall 0.5697006759 #> 20     soil_temperature_range 0.5523074848 #> 21               biogeo_realm 0.5031101984 #> 22              solar_rad_max 0.4905225950 #> 23     evapotranspiration_max 0.4814731607 #> 24               rainfall_max 0.4783927311 #> 25              aridity_index 0.4506424015 #> 26                  subregion 0.4469207404 #> 27                  swi_range 0.4217411381 #> 28            cloud_cover_min 0.4135724066 #> 29   evapotranspiration_range 0.4042241481 #> 30          temperature_range 0.3753489250 #> 31             rainfall_range 0.3545446680 #> 32    temperature_seasonality 0.2499469281 #> 33               rainfall_min 0.2484813976 #> 34                    swi_min 0.2406964836 #> 35             solar_rad_mean 0.2140860965 #> 36              soil_nitrogen 0.1872886789 #> 37                  continent 0.1818717607 #> 38            temperature_max 0.1589418736 #> 39                     region 0.1505256024 #> 40                   soil_soc 0.1493958026 #> 41    evapotranspiration_mean 0.1455828419 #> 42            solar_rad_range 0.1300751363 #> 43            temperature_min 0.1222051434 #> 44          cloud_cover_range 0.1216812855 #> 45       soil_temperature_min 0.1018471531 #> 46             topo_diversity 0.0925948262 #> 47                  soil_clay 0.0769366113 #> 48             humidity_range 0.0575393339 #> 49             country_income 0.0489946403 #> 50                  soil_sand 0.0427943817 #> 51             topo_elevation 0.0424759731 #> 52 growing_season_temperature 0.0239161476 #> 53                 topo_slope 0.0203697134 #> 54      soil_temperature_mean 0.0170527033 #> 55           temperature_mean 0.0067479780 #> 56                  soil_silt 0.0059316757 #> 57        growing_degree_days 0.0047849144 #> 58     evapotranspiration_min 0.0009965488 #> 59                country_gdp 0.0008850479 #> 60              solar_rad_min 0.0005751350 #> 61         country_population 0.0002513147 selected_predictors <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference_rsquared ) selected_predictors #>  [1] \"biogeo_ecoregion\"           \"biogeo_realm\"               #>  [3] \"solar_rad_max\"              \"rainfall_max\"               #>  [5] \"subregion\"                  \"swi_range\"                  #>  [7] \"rainfall_min\"               \"soil_nitrogen\"              #>  [9] \"continent\"                  \"soil_soc\"                   #> [11] \"cloud_cover_range\"          \"topo_diversity\"             #> [13] \"soil_clay\"                  \"humidity_range\"             #> [15] \"country_income\"             \"soil_sand\"                  #> [17] \"topo_elevation\"             \"growing_season_temperature\" #> [19] \"topo_slope\"                 \"country_gdp\"                #> [21] \"country_population\" f_rsquared(   x = \"growing_season_length\",   y = \"vi_mean\",   df = vi ) #> [1] 0.8076217 #example of preference order for a binary variable  #the binary variable table(vi$vi_binary)  #computation of preference order with  preference_auc <- preference_order(   df = vi,   response = \"vi_binary\",   predictors = vi_predictors,   f = f_gam_auc_unbalanced )  preference_auc"},{"path":"https://blasbenito.github.io/collinear/index.html","id":"cor_select-and-vif_select","dir":"","previous_headings":"Multicollinearity management with the collinear package.","what":"cor_select() and vif_select()","title":"Seamless Multicollinearity Management","text":"functions cor_select() vif_select(), called within collinear(), perform pairwise correlation filtering, VIF-based filtering. main difference cor_select() can handle categorical predictors even response omitted, vif_select() ignores entirely case.","code":"selected_predictors_cor <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference_rsquared )  selected_predictors_vif <- vif_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference_rsquared ) selected_predictors_cor #>  [1] \"biogeo_ecoregion\"           \"soil_temperature_max\"       #>  [3] \"soil_temperature_range\"     \"biogeo_realm\"               #>  [5] \"solar_rad_max\"              \"rainfall_max\"               #>  [7] \"aridity_index\"              \"subregion\"                  #>  [9] \"swi_range\"                  \"rainfall_min\"               #> [11] \"solar_rad_mean\"             \"soil_nitrogen\"              #> [13] \"continent\"                  \"soil_soc\"                   #> [15] \"solar_rad_range\"            \"cloud_cover_range\"          #> [17] \"topo_diversity\"             \"soil_clay\"                  #> [19] \"humidity_range\"             \"country_income\"             #> [21] \"soil_sand\"                  \"topo_elevation\"             #> [23] \"growing_season_temperature\" \"topo_slope\"                 #> [25] \"country_gdp\"                \"country_population\" selected_predictors_vif #>  [1] \"biogeo_ecoregion\"   \"soil_type\"          \"rainfall_mean\"      #>  [4] \"biogeo_realm\"       \"solar_rad_max\"      \"subregion\"          #>  [7] \"soil_nitrogen\"      \"continent\"          \"soil_soc\"           #> [10] \"topo_diversity\"     \"soil_clay\"          \"country_income\"     #> [13] \"soil_sand\"          \"topo_slope\"         \"country_gdp\"        #> [16] \"country_population\""},{"path":"https://blasbenito.github.io/collinear/index.html","id":"target_encoding_lab","dir":"","previous_headings":"Multicollinearity management with the collinear package.","what":"target_encoding_lab()","title":"Seamless Multicollinearity Management","text":"function target_encoding_lab() used within functions package encode categorical variables numeric. implements four target encoding methods: “mean” (target_encoding_mean()): replaces category mean response across category. White noise can added option increase data variability. “rank” (target_encoding_rank()): replaces category rank mean response across category. “rnorm” (target_encoding_rnorm()): replaces value category number generated stats::rnorm() normal distribution mean standard deviation response category. “loo” (target_encoding_loo()): replaces value category mean response across cases within category. White noise can added option increase data variability. method “mean” used default throughout functions package, can changed via argument encoding_method. use methods generate different numeric encodings categorical variable “koppen_zone”. relationship encoded versions “koppen_zone” response shown . function implementing method can used directly well. example shows “mean” method option replace = FALSE, replaces categorical values numeric ones output data frame. got , thank interest collinear. hope can find useful! Blas M. Benito, PhD","code":"df <- target_encoding_lab(   df = vi,   response = \"vi_mean\",   predictors = \"koppen_zone\",   encoding_methods = c(     \"mean\",     \"rank\",     \"rnorm\",     \"loo\"   ),   seed = 1,   rnorm_sd_multiplier = c(0, 0.01, 0.1),   white_noise = c(0, 0.01, 0.1),   verbose = TRUE ) #>  #> Encoding the predictor: koppen_zone #> New encoded predictor: 'koppen_zone__encoded_rank' #> New encoded predictor: 'koppen_zone__encoded_mean' #> New encoded predictor: 'koppen_zone__encoded_loo' #> New encoded predictor: 'koppen_zone__encoded_rank__noise_0.01' #> New encoded predictor: 'koppen_zone__encoded_mean__noise_0.01' #> New encoded predictor: 'koppen_zone__encoded_loo__noise_0.01' #> New encoded predictor: 'koppen_zone__encoded_rank__noise_0.1' #> New encoded predictor: 'koppen_zone__encoded_mean__noise_0.1' #> New encoded predictor: 'koppen_zone__encoded_loo__noise_0.1' #> New encoded predictor: 'koppen_zone__encoded_rnorm' #> New encoded predictor: 'koppen_zone__encoded_rnorm__sd_multiplier_0.01' #> New encoded predictor: 'koppen_zone__encoded_rnorm__sd_multiplier_0.1' #get names of encoded variables koppen_zone_encoded <- grep(   pattern = \"*__encoded*\",   x = colnames(df),   value = TRUE )  #record the user's graphical parameters user.par <- par(no.readonly = TRUE)  #modify graphical parameters for the plot par(mfrow = c(4, 3))  #plot target encoding x <- lapply(   X = koppen_zone_encoded,   FUN = function(x) plot(     x = df[[x]],     y = df$vi_mean,     xlab = x,     ylab = \"vi_mean\",     cex = 0.5     ) )  #reset the user's graphical parameters par(user.par) head(vi[, c(\"vi_mean\", \"koppen_zone\")], n = 10) #>    vi_mean koppen_zone #> 1     0.38         BSk #> 2     0.53         Cfa #> 3     0.45         Dfc #> 4     0.69         Cfb #> 5     0.42          Aw #> 6     0.68         Cfa #> 7     0.70          Af #> 8     0.26         BSh #> 9     0.55         Cwa #> 10    0.16         BWh df <- target_encoding_mean(   df = vi,   response = \"vi_mean\",   predictor = \"koppen_zone\",   replace = TRUE )  head(df[, c(\"vi_mean\", \"koppen_zone\")], n = 10) #>    vi_mean koppen_zone #> 1     0.38   0.2487370 #> 2     0.53   0.5661689 #> 3     0.45   0.4338492 #> 4     0.69   0.5889908 #> 5     0.42   0.5275241 #> 6     0.68   0.5661689 #> 7     0.70   0.6708994 #> 8     0.26   0.3230049 #> 9     0.55   0.5218936 #> 10    0.16   0.1330452"},{"path":"https://blasbenito.github.io/collinear/reference/auc_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Area Under the Receiver Operating Characteristic — auc_score","title":"Area Under the Receiver Operating Characteristic — auc_score","text":"Computes AUC score binary model predictions.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/auc_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area Under the Receiver Operating Characteristic — auc_score","text":"","code":"auc_score(observed = NULL, predicted = NULL)"},{"path":"https://blasbenito.github.io/collinear/reference/auc_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area Under the Receiver Operating Characteristic — auc_score","text":"observed (required, integer) Numeric vector observations. Valid values 1 0. Must length predicted. Default: NULL predicted (required, numeric) Numeric vector range 0-1 binary model predictions. Must length observed.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/auc_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area Under the Receiver Operating Characteristic — auc_score","text":"AUC value.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/auc_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area Under the Receiver Operating Characteristic — auc_score","text":"","code":"out <- auc_score(    observed = c(0, 0, 1, 1),    predicted = c(0.1, 0.6, 0.4, 0.8)    )"},{"path":"https://blasbenito.github.io/collinear/reference/collinear-package.html","id":null,"dir":"Reference","previous_headings":"","what":"collinear — collinear-package","title":"collinear — collinear-package","text":"Package multicollinearity management data frames numeric categorical variables.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/collinear/reference/collinear-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"collinear — collinear-package","text":"Maintainer: Blas M. Benito blasbenito@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Automated multicollinearity management — collinear","title":"Automated multicollinearity management — collinear","text":"Automates multicollinearity management data frames numeric categorical predictors combining four methods: Pairwise correlation filtering: Pearson, Spearman, Cramer's V statistics identify pairs highly correlated predictors. Variance Inflation Factor (VIF) filtering: identifies predictors linear combinations predictors. Target encoding: transform categorical predictors numeric using numeric variable reference. Flexible prioritization method: help user select meaningful set non-correlated predictors. pairwise correlation filtering implemented cor_select(). function applies recursive forward selection algorithm keep predictors Pearson correlation selected predictors lower value argument max_cor.  two predictors correlated threshold, one lowest preference order removed. stage, preference_order NULL, predictors ranked lower higher sum absolute pairwise correlation predictors. VIF-based filtering implemented vif_select(), removes variables recomputes VIF scores iteratively, variables resulting selection VIF value argument max_vif. VIF given variable y computed 1/(1-R2), R2 R-squared multiple regression model fitted using y response predictors. equation can interpreted \"rate perfect model's R-squared unexplained variance model\". possible range VIF values (1, Inf], recommended thresholds maximum VIF (argument max_vif) may vary, 2.5, 5, 10 values commonly mentioned relevant bibliography. stage, preference_order NULL, predictors ranked lower higher Variance Inflation Factor. 'response' argument provided, categorical predictors converted numeric via target encoding function target_encoding_lab(), predictors handled numeric multicollinearity filtering. 'response' argument provided, categorical variables ignored. However, case, function cor_select() can handle categorical variables, albeit lower computation speed. argument preference_order allows prioritizing variables might interesting even required given analysis. preference_order provided, predictors ranked lower higher sum absolute correlations predictors cor_select(), VIF vif_select(), removed one one maximum R-squared correlation matrix lower max_cor maximum VIF max_vif. Please note near-zero variance columns identified identify_zero_variance_predictors(), ignored collinear(), cor_select(), vif_select().","code":""},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automated multicollinearity management — collinear","text":"","code":"collinear(   df = NULL,   response = NULL,   predictors = NULL,   preference_order = NULL,   cor_method = \"pearson\",   max_cor = 0.75,   max_vif = 5,   encoding_method = \"mean\" )"},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automated multicollinearity management — collinear","text":"df (required; data frame) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default: NULL preference_order (optional; character vector) vector column names 'predictors' desired preference order, result function preference_order(). Allows defining priority order selecting predictors, can particularly useful predictors critical analysis others. Predictors included argument ranked Variance Inflation Factor. Default: NULL. cor_method (optional; character string) Method used compute pairwise correlations. Accepted methods \"pearson\" (recommended minimum 30 rows 'df') \"spearman\" (recommended minimum 10 rows 'df'). Default: \"pearson\". max_cor (optional; numeric) Maximum correlation allowed pair predictors. Higher values return larger number predictors higher multicollinearity. Default: 0.75 max_vif (optional, numeric) Numeric recommended values 2.5 10 defining maximum VIF allowed given predictor output dataset. Higher VIF thresholds result higher number selected variables. Default: 5. encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automated multicollinearity management — collinear","text":"Character vector names uncorrelated predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Automated multicollinearity management — collinear","text":"David . Belsley, D.., Kuh, E., Welsch, R.E. (1980). Regression Diagnostics: Identifying Influential Data Sources Collinearity. John Wiley & Sons. doi:10.1002/0471725153 . Micci-Barreca, D. (2001) Preprocessing Scheme High-Cardinality Categorical Attributes Classification Prediction Problems. SIGKDD Explor. Newsl. 3, 1, 27-32 doi:10.1145/507533.507538","code":""},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automated multicollinearity management — collinear","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/collinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automated multicollinearity management — collinear","text":"","code":"data(   vi,   vi_predictors )  #subset to limit example run time vi <- vi[1:1000, ]  #without response #without preference_order #permissive max_cor and max_vif #only numeric variables in output selected.predictors <- collinear(   df = vi,   predictors = vi_predictors,   max_cor = 0.8,   max_vif = 10   )  selected.predictors #>  [1] \"topo_diversity\"             \"country_gdp\"                #>  [3] \"topo_slope\"                 \"country_population\"         #>  [5] \"soil_soc\"                   \"soil_clay\"                  #>  [7] \"soil_sand\"                  \"topo_elevation\"             #>  [9] \"soil_nitrogen\"              \"rainfall_range\"             #> [11] \"soil_ph\"                    \"growing_season_temperature\" #> [13] \"rainfall_min\"               \"swi_range\"                  #> [15] \"humidity_range\"             \"soil_temperature_max\"       #> [17] \"evapotranspiration_range\"   \"swi_min\"                    #> [19] \"soil_temperature_min\"       \"solar_rad_max\"              #> [21] \"solar_rad_min\"              \"cloud_cover_min\"            #> [23] \"cloud_cover_range\"           #without response #without preference_order #restrictive max_cor and max_vif #only numeric variables in output selected.predictors <- collinear(   df = vi,   predictors = vi_predictors,   max_cor = 0.5,   max_vif = 2.5 )  selected.predictors #>  [1] \"soil_clay\"                  \"country_population\"         #>  [3] \"topo_slope\"                 \"soil_soc\"                   #>  [5] \"humidity_range\"             \"topo_elevation\"             #>  [7] \"soil_silt\"                  \"growing_season_temperature\" #>  [9] \"swi_max\"                    \"cloud_cover_range\"           #with response #without preference_order #restrictive max_cor and max_vif #numerics and categorical variables in output selected.predictors <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_cor = 0.5,   max_vif = 2.5 )  selected.predictors #>  [1] \"country_income\"             \"soil_clay\"                  #>  [3] \"country_population\"         \"topo_slope\"                 #>  [5] \"soil_soc\"                   \"continent\"                  #>  [7] \"topo_elevation\"             \"humidity_range\"             #>  [9] \"growing_season_temperature\" \"soil_silt\"                  #> [11] \"cloud_cover_range\"          \"soil_type\"                   #with response #with user-defined preference_order #restrictive max_cor and max_vif #numerics and categorical variables in output selected.predictors <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = c(     \"soil_temperature_mean\",     \"swi_mean\",     \"rainfall_mean\",     \"evapotranspiration_mean\"   ),   max_cor = 0.5,   max_vif = 2.5 )  selected.predictors #>  [1] \"soil_temperature_mean\" \"swi_mean\"              \"country_income\"        #>  [4] \"soil_clay\"             \"topo_slope\"            \"country_population\"    #>  [7] \"continent\"             \"topo_elevation\"        \"soil_soc\"              #> [10] \"humidity_range\"        \"soil_silt\"             \"cloud_cover_range\"       #with response #with automated preference_order #restrictive max_cor and max_vif #numerics and categorical variables in output preference.order <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rsquared, #cor(response, predictor) )  selected.predictors <- collinear(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference.order,   max_cor = 0.5,   max_vif = 2.5 )  selected.predictors #>  [1] \"biogeo_ecoregion\"   \"continent\"          \"cloud_cover_range\"  #>  [4] \"solar_rad_range\"    \"topo_diversity\"     \"soil_clay\"          #>  [7] \"humidity_range\"     \"country_income\"     \"topo_elevation\"     #> [10] \"soil_silt\"          \"country_population\""},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation data frame of numeric and character variables — cor_df","title":"Correlation data frame of numeric and character variables — cor_df","text":"Returns correlation data frame pairs predictors training dataset. Non-numeric predictors transformed numeric via target encoding, using 'response' variable reference.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation data frame of numeric and character variables — cor_df","text":"","code":"cor_df(   df = NULL,   response = NULL,   predictors = NULL,   cor_method = \"pearson\",   encoding_method = \"mean\" )"},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation data frame of numeric and character variables — cor_df","text":"df (required; data frame) data frame numeric /character predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' cor_method (optional; character string) Method used compute pairwise correlations. Accepted methods \"pearson\" (recommended minimum 30 rows 'df') \"spearman\" (recommended minimum 10 rows 'df'). Default: \"pearson\". encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation data frame of numeric and character variables — cor_df","text":"data frame pairs predictors correlation.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlation data frame of numeric and character variables — cor_df","text":"function attempts handle correlations pairs variables can different types: numeric vs. numeric: computed stats::cor() methods \"pearson\" \"spearman\". numeric vs. character, two alternatives leading different results: 'response' provided: character variable target-encoded numeric using values response reference, correlation numeric variable computed stats::cor(). option generates response-specific result suitable training statistical machine-learning models 'response' NULL (name non-numeric column): character variable target-encoded numeric using values numeric predictor (instead response) reference, correlation computed stats::cor(). option leads response-agnostic result suitable clustering problems. character vs. character, two alternatives leading different results: 'response' provided: character variables target-encoded numeric using values response reference, correlation computed stats::cor(). response' NULL (name non-numeric column): association character variables computed using Cramer's V. option might problematic, R-squared values Cramer's V, even range 0 1, fully comparable.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Correlation data frame of numeric and character variables — cor_df","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation data frame of numeric and character variables — cor_df","text":"","code":"data(   vi,   vi_predictors )  #reduce size of vi to speed-up example execution vi <- vi[1:1000, ] vi_predictors <- vi_predictors[1:10]  #without response #categorical vs categorical compared with cramer_v() #categorical vs numerical compared wit stats::cor() via target-encoding #numerical vs numerical compared with stats::cor() df <- cor_df(   df = vi,   predictors = vi_predictors )  head(df) #> # A tibble: 6 × 3 #>   x              y              correlation #>   <chr>          <chr>                <dbl> #> 1 swi_max        swi_mean             0.896 #> 2 swi_min        swi_mean             0.678 #> 3 swi_min        swi_max              0.642 #> 4 topo_diversity topo_slope           0.538 #> 5 topo_elevation topo_slope           0.379 #> 6 swi_mean       topo_diversity       0.243  #with response #different solution than previous one #because target encoding is done against the response #rather than against the other numeric in the pair df <- cor_df(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors )  head(df) #> # A tibble: 6 × 3 #>   x                  y                  correlation #>   <chr>              <chr>                    <dbl> #> 1 koppen_description koppen_zone              0.991 #> 2 koppen_group       koppen_zone              0.937 #> 3 koppen_description koppen_group             0.933 #> 4 swi_max            swi_mean                 0.896 #> 5 swi_mean           koppen_description       0.882 #> 6 swi_mean           koppen_zone              0.875"},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation matrix of numeric and character variables — cor_matrix","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"Returns correlation matrix pairs predictors training dataset. Non-numeric predictors transformed numeric via target encoding, using 'response' variable reference.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"","code":"cor_matrix(   df = NULL,   response = NULL,   predictors = NULL,   cor_method = \"pearson\",   encoding_method = \"mean\" )"},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"df (required; data frame) data frame numeric /character predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' cor_method (optional; character string) Method used compute pairwise correlations. Accepted methods \"pearson\" (recommended minimum 30 rows 'df') \"spearman\" (recommended minimum 10 rows 'df'). Default: \"pearson\". encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"correlation matrix","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"function attempts handle correlations pairs variables can different types: numeric vs. numeric: computed stats::cor() methods \"pearson\" \"spearman\". numeric vs. character, two alternatives leading different results: 'response' provided: character variable target-encoded numeric using values response reference, correlation numeric variable computed stats::cor(). option generates response-specific result suitable training statistical machine-learning models 'response' NULL (name non-numeric column): character variable target-encoded numeric using values numeric predictor (instead response) reference, correlation computed stats::cor(). option leads response-agnostic result suitable clustering problems. character vs. character, two alternatives leading different results: 'response' provided: character variables target-encoded numeric using values response reference, correlation computed stats::cor(). response' NULL (name non-numeric column): association character variables computed using Cramer's V. option might problematic, R-squared values Cramer's V, even range 0 1, fully comparable.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation matrix of numeric and character variables — cor_matrix","text":"","code":"data(   vi,   vi_predictors )  #subset to limit example run time vi <- vi[1:1000, ] vi_predictors <- vi_predictors[1:10]  #convert correlation data frame to matrix df <- cor_df(   df = vi,   predictors = vi_predictors )  m <- cor_matrix(   df = df )  #show first three columns and rows m[1:5, 1:5] #>                swi_mean swi_max topo_slope topo_diversity topo_elevation #> swi_mean          1.000   0.896      0.129          0.243         -0.176 #> swi_max           0.896   1.000      0.109          0.185         -0.090 #> topo_slope        0.129   0.109      1.000          0.538          0.379 #> topo_diversity    0.243   0.185      0.538          1.000          0.221 #> topo_elevation   -0.176  -0.090      0.379          0.221          1.000  #generate correlation matrix directly m <- cor_matrix(   df = vi,   predictors = vi_predictors )  m[1:5, 1:5] #>                swi_mean swi_max topo_slope topo_diversity topo_elevation #> swi_mean          1.000   0.896      0.129          0.243         -0.176 #> swi_max           0.896   1.000      0.109          0.185         -0.090 #> topo_slope        0.129   0.109      1.000          0.538          0.379 #> topo_diversity    0.243   0.185      0.538          1.000          0.221 #> topo_elevation   -0.176  -0.090      0.379          0.221          1.000  #with response (much faster) #different solution than previous one #because target encoding is done against the response #rather than against the other numeric in the pair m <- cor_matrix(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors )  m[1:5, 1:5] #>                    koppen_zone koppen_group swi_mean koppen_description #> koppen_zone              1.000        0.937    0.875              0.991 #> koppen_group             0.937        1.000    0.853              0.933 #> swi_mean                 0.875        0.853    1.000              0.882 #> koppen_description       0.991        0.933    0.882              1.000 #> soil_type                0.775        0.747    0.741              0.771 #>                    soil_type #> koppen_zone            0.775 #> koppen_group           0.747 #> swi_mean               0.741 #> koppen_description     0.771 #> soil_type              1.000"},{"path":"https://blasbenito.github.io/collinear/reference/cor_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Automated multicollinearity reduction via pairwise correlation — cor_select","title":"Automated multicollinearity reduction via pairwise correlation — cor_select","text":"Applies recursive forward selection algorithm algorithm select predictors bivariate correlation predictor lower threshold defined argument max_cor. argument response provided, non-numeric variables predictors transformed numeric using target encoding (see target_encoding_lab()). Otherwise, non-numeric variables ignored. argument preference_order allows defining preference selection order preserve (possible) variables might interesting even required given analysis. NULL, predictors ordered lower higher sum absolute pairwise correlation predictors. example, predictors c(\"\", \"b\", \"c\") preference_order c(\"\", \"b\"), two possibilities: correlation \"\" \"b\" max_cor, variables selected. correlation equal max_cor, \"\" selected, matter correlation \"c\", preference_order provided, predictors ranked variance inflation factor computed vif_df().","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automated multicollinearity reduction via pairwise correlation — cor_select","text":"","code":"cor_select(   df = NULL,   response = NULL,   predictors = NULL,   preference_order = NULL,   cor_method = \"pearson\",   max_cor = 0.75,   encoding_method = \"mean\" )"},{"path":"https://blasbenito.github.io/collinear/reference/cor_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automated multicollinearity reduction via pairwise correlation — cor_select","text":"df (required; data frame) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Description' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) Character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' preference_order (optional; character vector) vector column names 'predictors' desired preference order, result function preference_order(). Allows defining priority order selecting predictors, can particularly useful predictors critical analysis others. Default: NULL (predictors ordered lower higher sum absolute correlation predictors). cor_method (optional; character string) Method used compute pairwise correlations. Accepted methods \"pearson\" (recommended minimum 30 rows 'df') \"spearman\" (recommended minimum 10 rows 'df'). Default: \"pearson\". max_cor (optional; numeric) Maximum correlation allowed pair predictors. Higher values return larger number predictors higher multicollinearity. Default: 0.75 encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automated multicollinearity reduction via pairwise correlation — cor_select","text":"Character vector names selected predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_select.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automated multicollinearity reduction via pairwise correlation — cor_select","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cor_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automated multicollinearity reduction via pairwise correlation — cor_select","text":"","code":"data(   vi,   vi_predictors )  #subset to limit example run time vi <- vi[1:1000, ] vi_predictors <- vi_predictors[1:10]  #without response #without preference_order #permissive max_cor selected.predictors <- cor_select(   df = vi,   predictors = vi_predictors,   max_cor = 0.8 )  selected.predictors #> [1] \"topo_elevation\" \"topo_slope\"     \"topo_diversity\" \"swi_min\"        #> [5] \"swi_max\"         #without response #without preference_order #restrictive max_cor selected.predictors <- cor_select(   df = vi,   predictors = vi_predictors,   max_cor = 0.5 )  selected.predictors #> [1] \"topo_elevation\" \"topo_slope\"     \"swi_min\"         #with response #without preference_order #restrictive max_cor #slightly different solution than previous one #because here target encoding is done against the response #while before was done pairwise against each numeric predictor selected.predictors <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_cor = 0.5 )  selected.predictors #> [1] \"topo_elevation\" \"topo_slope\"     \"swi_min\"        \"soil_type\"       #with response #with user-defined preference_order #restrictive max_cor #numerics and categorical variables in output selected.predictors <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = c(     \"soil_type\", #categorical variable     \"soil_temperature_mean\",     \"swi_mean\",     \"rainfall_mean\",     \"evapotranspiration_mean\"   ),   max_cor = 0.5 )  selected.predictors #> [1] \"soil_type\"      \"topo_elevation\" \"topo_slope\"     \"swi_min\"          #with response #with automated preference_order #restrictive max_cor and max_vif #numerics and categorical variables in output preference.order <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rsquared #cor(response, predictor) )  head(preference.order) #>            predictor preference #> 1        koppen_zone  0.8137065 #> 2 koppen_description  0.7984011 #> 3           swi_mean  0.7433342 #> 4       koppen_group  0.7150807 #> 5          soil_type  0.6465576 #> 6            swi_max  0.5933516  selected.predictors <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference.order,   max_cor = 0.5 )  selected.predictors #> [1] \"koppen_zone\"    \"topo_diversity\" \"topo_elevation\""},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Bias Corrected Cramer's V — cramer_v","title":"Bias Corrected Cramer's V — cramer_v","text":"cramer_v() function calculates bias-corrected Cramer's V, measure association two categorical variables. Cramer's V extension chi-squared test measure strength association two categorical variables. Provides values 0 1, 0 indicates association, 1 indicates perfect association. essence, Cramer's V assesses co-occurrence categories two variables quantify strongly variables related. Even range 0 1, Cramer's V values directly comparable R-squared values, , multicollinearity analysis containing types values must assessed care. probably preferable convert non-numeric variables numeric using target encoding rather multicollinearity analysis.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bias Corrected Cramer's V — cramer_v","text":"","code":"cramer_v(x = NULL, y = NULL, check_input = TRUE)"},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bias Corrected Cramer's V — cramer_v","text":"x (required; character vector) character vector representing categorical variable.  Default: NULL y (required; character vector) character vector representing categorical variable. Must length 'x'. Default: NULL check_input (required; logical) FALSE, disables data checking slightly faster execution. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bias Corrected Cramer's V — cramer_v","text":"Numeric, value Cramer's V","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bias Corrected Cramer's V — cramer_v","text":"Cramér, H. (1946). Mathematical Methods Statistics. Princeton: Princeton University Press, page 282 (Chapter 21. two-dimensional case). ISBN 0-691-08004-6","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bias Corrected Cramer's V — cramer_v","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/cramer_v.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bias Corrected Cramer's V — cramer_v","text":"","code":"#loading example data data(vi)  #subset to limit example run time vi <- vi[1:1000, ]  #computing Cramer's V for two categorical predictors v <- cramer_v(   x = vi$soil_type,   y = vi$koppen_zone   )  v #> [1] 0.3354274"},{"path":"https://blasbenito.github.io/collinear/reference/drop_geometry_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes geometry column in sf data frames — drop_geometry_column","title":"Removes geometry column in sf data frames — drop_geometry_column","text":"Replicates functionality  \\link[sf]{st_drop_geometry} without depending sf package.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/drop_geometry_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes geometry column in sf data frames — drop_geometry_column","text":"","code":"drop_geometry_column(df)"},{"path":"https://blasbenito.github.io/collinear/reference/drop_geometry_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes geometry column in sf data frames — drop_geometry_column","text":"df (required; data frame matrix) Input data frame. Default: NULL","code":""},{"path":"https://blasbenito.github.io/collinear/reference/drop_geometry_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes geometry column in sf data frames — drop_geometry_column","text":"input data frame without geometry column","code":""},{"path":"https://blasbenito.github.io/collinear/reference/drop_geometry_column.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Removes geometry column in sf data frames — drop_geometry_column","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_auc_balanced.html","id":null,"dir":"Reference","previous_headings":"","what":"AUC of Logistic GAM Model — f_gam_auc_balanced","title":"AUC of Logistic GAM Model — f_gam_auc_balanced","text":"Fits binomial logistic Generalized Additive Model (GAM) y ~ s(x, k = 3) binary response numeric predictor returns Area Curve observations versus predictions.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_auc_balanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AUC of Logistic GAM Model — f_gam_auc_balanced","text":"","code":"f_gam_auc_balanced(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_auc_balanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AUC of Logistic GAM Model — f_gam_auc_balanced","text":"x (required, character string) name predictor variable. y (required, character string) name binary response variable. df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_auc_balanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AUC of Logistic GAM Model — f_gam_auc_balanced","text":"Area Curve","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_auc_balanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AUC of Logistic GAM Model — f_gam_auc_balanced","text":"","code":"data(vi)  #subset to limit example run time vi <- vi[1:1000, ]  #this example requires \"mgcv\" installed if(requireNamespace(package = \"mgcv\", quietly = TRUE)){    f_gam_auc_balanced(     x = \"growing_season_length\", #predictor     y = \"vi_binary\",               #response     df = vi   )  } #> [1] 0.9367964"},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_auc_unbalanced.html","id":null,"dir":"Reference","previous_headings":"","what":"AUC of Logistic GAM Model with Weighted Cases — f_gam_auc_unbalanced","title":"AUC of Logistic GAM Model with Weighted Cases — f_gam_auc_unbalanced","text":"Fits quasibinomial logistic Generalized Additive Model (GAM) y ~ s(x, k = 3) weighted cases binary response numeric predictor returns Area Curve observations versus predictions.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_auc_unbalanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AUC of Logistic GAM Model with Weighted Cases — f_gam_auc_unbalanced","text":"","code":"f_gam_auc_unbalanced(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_auc_unbalanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AUC of Logistic GAM Model with Weighted Cases — f_gam_auc_unbalanced","text":"x (required, character string) name predictor variable. y (required, character string) name binary response variable df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_auc_unbalanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AUC of Logistic GAM Model with Weighted Cases — f_gam_auc_unbalanced","text":"Area Curve","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_auc_unbalanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AUC of Logistic GAM Model with Weighted Cases — f_gam_auc_unbalanced","text":"","code":"data(vi)  #subset to limit example run time vi <- vi[1:1000, ]  #this example requires \"mgcv\" installed if(requireNamespace(package = \"mgcv\", quietly = TRUE)){    f_gam_auc_unbalanced(     x = \"growing_season_length\", #predictor     y = \"vi_binary\",               #response     df = vi   )  } #> [1] 0.9367964"},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_deviance.html","id":null,"dir":"Reference","previous_headings":"","what":"Explained Deviance from univariate GAM model — f_gam_deviance","title":"Explained Deviance from univariate GAM model — f_gam_deviance","text":"Computes explained deviance response predictor via Generalized Additive Model (GAM). option slower f_rsquared(), suitable fitting GAMs resulting preference order.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_deviance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explained Deviance from univariate GAM model — f_gam_deviance","text":"","code":"f_gam_deviance(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_deviance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explained Deviance from univariate GAM model — f_gam_deviance","text":"x (required, character string) name predictor variable. y (required, character string) name response variable df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_deviance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explained Deviance from univariate GAM model — f_gam_deviance","text":"Explained deviance","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_gam_deviance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explained Deviance from univariate GAM model — f_gam_deviance","text":"","code":"data(vi)  #subset to limit example run time vi <- vi[1:1000, ]  #this example requires \"mgcv\" installed in the system if(requireNamespace(package = \"mgcv\", quietly = TRUE)){    f_gam_deviance(     x = \"growing_season_length\", #predictor     y = \"vi_mean\",               #response     df = vi   )  } #> [1] 0.8142463"},{"path":"https://blasbenito.github.io/collinear/reference/f_logistic_auc_balanced.html","id":null,"dir":"Reference","previous_headings":"","what":"AUC of Binomial GLM with Logit Link — f_logistic_auc_balanced","title":"AUC of Binomial GLM with Logit Link — f_logistic_auc_balanced","text":"Fits logistic GLM model y ~ x y binary response values 0 1 x numeric. function suitable response variable balanced. response unbalanced, f_logistic_auc_unbalanced() provide better results.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_logistic_auc_balanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AUC of Binomial GLM with Logit Link — f_logistic_auc_balanced","text":"","code":"f_logistic_auc_balanced(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_logistic_auc_balanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AUC of Binomial GLM with Logit Link — f_logistic_auc_balanced","text":"x (required, character string) name predictor variable. y (required, character string) name binary response variable df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_logistic_auc_balanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AUC of Binomial GLM with Logit Link — f_logistic_auc_balanced","text":"Area Curve","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_logistic_auc_balanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AUC of Binomial GLM with Logit Link — f_logistic_auc_balanced","text":"","code":"data(vi)  #subset to limit example run time vi <- vi[1:1000, ]  f_logistic_auc_balanced(   x = \"growing_season_length\", #predictor   y = \"vi_binary\",             #binary response   df = vi ) #> [1] 0.9367964"},{"path":"https://blasbenito.github.io/collinear/reference/f_logistic_auc_unbalanced.html","id":null,"dir":"Reference","previous_headings":"","what":"AUC of Binomial GLM with Logit Link and Case Weights — f_logistic_auc_unbalanced","title":"AUC of Binomial GLM with Logit Link and Case Weights — f_logistic_auc_unbalanced","text":"Fits quasibinomial GLM model y ~ x case weights y unbalanced binary response values 0 1 x numeric. uses function case_weights() weight 0s 1s according frequency within y.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_logistic_auc_unbalanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AUC of Binomial GLM with Logit Link and Case Weights — f_logistic_auc_unbalanced","text":"","code":"f_logistic_auc_unbalanced(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_logistic_auc_unbalanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AUC of Binomial GLM with Logit Link and Case Weights — f_logistic_auc_unbalanced","text":"x (required, character string) name predictor variable. y (required, character string) name binary response variable. df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_logistic_auc_unbalanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AUC of Binomial GLM with Logit Link and Case Weights — f_logistic_auc_unbalanced","text":"Area Curve","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_logistic_auc_unbalanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AUC of Binomial GLM with Logit Link and Case Weights — f_logistic_auc_unbalanced","text":"","code":"data(vi)  #subset to limit example run time vi <- vi[1:1000, ]  f_logistic_auc_unbalanced(   x = \"growing_season_length\", #predictor   y = \"vi_binary\",             #binary response   df = vi ) #> [1] 0.9367964"},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_auc_balanced.html","id":null,"dir":"Reference","previous_headings":"","what":"AUC of Random Forest model of a balanced binary response — f_rf_auc_balanced","title":"AUC of Random Forest model of a balanced binary response — f_rf_auc_balanced","text":"Computes univariate random forest model  cases via \\link[ranger]{ranger} returns Area Curve --bag data.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_auc_balanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AUC of Random Forest model of a balanced binary response — f_rf_auc_balanced","text":"","code":"f_rf_auc_balanced(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_auc_balanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AUC of Random Forest model of a balanced binary response — f_rf_auc_balanced","text":"x (required, character string) name predictor variable. y (required, character string) name binary response variable df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_auc_balanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AUC of Random Forest model of a balanced binary response — f_rf_auc_balanced","text":"Area Curve","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_auc_balanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AUC of Random Forest model of a balanced binary response — f_rf_auc_balanced","text":"","code":"data(vi)  #subset to limit example run time vi <- vi[1:1000, ]  #this example requires \"ranger\" installed in the system if(requireNamespace(package = \"ranger\", quietly = TRUE)){    f_rf_auc_balanced(     x = \"growing_season_length\", #predictor     y = \"vi_binary\",               #response     df = vi   )  } #> [1] 0.9156479"},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_auc_unbalanced.html","id":null,"dir":"Reference","previous_headings":"","what":"AUC of Random Forest model of an unbalanced binary response — f_rf_auc_unbalanced","title":"AUC of Random Forest model of an unbalanced binary response — f_rf_auc_unbalanced","text":"Computes univariate random forest model weighted cases via \\link[ranger]{ranger} returns Area Curve --bag data.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_auc_unbalanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AUC of Random Forest model of an unbalanced binary response — f_rf_auc_unbalanced","text":"","code":"f_rf_auc_unbalanced(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_auc_unbalanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AUC of Random Forest model of an unbalanced binary response — f_rf_auc_unbalanced","text":"x (required, character string) name predictor variable. y (required, character string) name binary response variable df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_auc_unbalanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AUC of Random Forest model of an unbalanced binary response — f_rf_auc_unbalanced","text":"Area Curve","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_auc_unbalanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AUC of Random Forest model of an unbalanced binary response — f_rf_auc_unbalanced","text":"","code":"data(vi)  #subset to limit example run time vi <- vi[1:1000, ]  #this example requires \"ranger\" installed in the system if(requireNamespace(package = \"ranger\", quietly = TRUE)){    f_rf_auc_unbalanced(     x = \"growing_season_length\", #predictor     y = \"vi_binary\",               #response     df = vi   )  } #> [1] 0.9158895"},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_rsquared.html","id":null,"dir":"Reference","previous_headings":"","what":"R-squared of Random Forest model — f_rf_rsquared","title":"R-squared of Random Forest model — f_rf_rsquared","text":"Computes univariate random forest model \\link[ranger]{ranger} returns R-squared --bag data.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_rsquared.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R-squared of Random Forest model — f_rf_rsquared","text":"","code":"f_rf_rsquared(x, y, df)  f_rf_deviance(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_rsquared.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R-squared of Random Forest model — f_rf_rsquared","text":"x (required, character string) name predictor variable. y (required, character string) name response variable df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_rsquared.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R-squared of Random Forest model — f_rf_rsquared","text":"R-squared","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_rsquared.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R-squared of Random Forest model — f_rf_rsquared","text":"f_rf_rsquared() f_rf_deviance() synonyms","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rf_rsquared.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R-squared of Random Forest model — f_rf_rsquared","text":"","code":"data(vi)  #subset to limit example run time vi <- vi[1:1000, ]  #this example requires \"ranger\" installed in the system if(requireNamespace(package = \"ranger\", quietly = TRUE)){    f_rf_rsquared(     x = \"growing_season_length\", #predictor     y = \"vi_mean\",               #response     df = vi   )  } #> [1] 0.7921876"},{"path":"https://blasbenito.github.io/collinear/reference/f_rsquared.html","id":null,"dir":"Reference","previous_headings":"","what":"R-squared between a response and a predictor — f_rsquared","title":"R-squared between a response and a predictor — f_rsquared","text":"Computes R-squared response predictor. Fastest option compute preference order.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rsquared.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R-squared between a response and a predictor — f_rsquared","text":"","code":"f_rsquared(x, y, df)"},{"path":"https://blasbenito.github.io/collinear/reference/f_rsquared.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R-squared between a response and a predictor — f_rsquared","text":"x (required, character string) name predictor variable. y (required, character string) name response variable df (required, data frame) data frame columns 'x' 'y'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rsquared.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R-squared between a response and a predictor — f_rsquared","text":"R-squared","code":""},{"path":"https://blasbenito.github.io/collinear/reference/f_rsquared.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R-squared between a response and a predictor — f_rsquared","text":"","code":"data(vi)  #subset to limit example run time vi <- vi[1:1000, ]  f_rsquared(   x = \"growing_season_length\", #predictor   y = \"vi_mean\",               #response   df = vi ) #> [1] 0.8112105"},{"path":"https://blasbenito.github.io/collinear/reference/identify_non_numeric_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify non-numeric predictors — identify_non_numeric_predictors","title":"Identify non-numeric predictors — identify_non_numeric_predictors","text":"Given 'df' 'predictors' arguments, function subsets returns non-numeric (character, factor, logical) predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_non_numeric_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify non-numeric predictors — identify_non_numeric_predictors","text":"","code":"identify_non_numeric_predictors(df = NULL, predictors = NULL)"},{"path":"https://blasbenito.github.io/collinear/reference/identify_non_numeric_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify non-numeric predictors — identify_non_numeric_predictors","text":"df (required; data frame) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. predictors (optional; character vector) vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL'","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_non_numeric_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify non-numeric predictors — identify_non_numeric_predictors","text":"character vector names numeric predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_non_numeric_predictors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify non-numeric predictors — identify_non_numeric_predictors","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_non_numeric_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify non-numeric predictors — identify_non_numeric_predictors","text":"","code":"data(   vi,   vi_predictors )  non.numeric.predictors <- identify_non_numeric_predictors(   df = vi,   predictors = vi_predictors )  non.numeric.predictors #>  [1] \"koppen_zone\"        \"koppen_group\"       \"koppen_description\" #>  [4] \"soil_type\"          \"biogeo_ecoregion\"   \"biogeo_biome\"       #>  [7] \"biogeo_realm\"       \"country_name\"       \"country_income\"     #> [10] \"continent\"          \"region\"             \"subregion\""},{"path":"https://blasbenito.github.io/collinear/reference/identify_numeric_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify numeric predictors — identify_numeric_predictors","title":"Identify numeric predictors — identify_numeric_predictors","text":"Given 'df' 'predictors' arguments, function subsets returns numeric predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_numeric_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify numeric predictors — identify_numeric_predictors","text":"","code":"identify_numeric_predictors(df = NULL, predictors = NULL)"},{"path":"https://blasbenito.github.io/collinear/reference/identify_numeric_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify numeric predictors — identify_numeric_predictors","text":"df (required; data frame) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. predictors (optional; character vector) vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL'","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_numeric_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify numeric predictors — identify_numeric_predictors","text":"character vector names numeric predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_numeric_predictors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify numeric predictors — identify_numeric_predictors","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_numeric_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify numeric predictors — identify_numeric_predictors","text":"","code":"if (interactive()) {  data(   vi,   vi_predictors )  numeric.predictors <- identify_numeric_predictors(   df = vi,   predictors = vi_predictors )  numeric.predictors  }"},{"path":"https://blasbenito.github.io/collinear/reference/identify_zero_variance_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","title":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","text":"Predictors variance zero near zero highly problematic multicollinearity analysis modelling general. function identifies predictors level sensitivity defined 'decimals' argument. Smaller number decimals increase number variables detected near zero variance. Recommended values depend range numeric variables 'df'.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_zero_variance_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","text":"","code":"identify_zero_variance_predictors(df = NULL, predictors = NULL, decimals = 4)"},{"path":"https://blasbenito.github.io/collinear/reference/identify_zero_variance_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","text":"df (required; data frame) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. predictors (optional; character vector) vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' decimals (required, integer) number decimal places zero variance test. Default: 4","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_zero_variance_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","text":"character vector names zero near-zero variance columns.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_zero_variance_predictors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/identify_zero_variance_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify zero and near-zero-variance predictors — identify_zero_variance_predictors","text":"","code":"data(   vi,   vi_predictors )  #create zero variance predictors vi$zv_1 <- 1 vi$zv_2 <- runif(n = nrow(vi), min = 0, max = 0.0001)   #add to vi predictors vi_predictors <- c(   vi_predictors,   \"zv_1\",   \"zv_2\" )  #identify zero variance predictors zero.variance.predictors <- identify_zero_variance_predictors(   df = vi,   predictors = vi_predictors )  zero.variance.predictors #> [1] \"zv_1\" \"zv_2\""},{"path":"https://blasbenito.github.io/collinear/reference/internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Case Weights for Unbalanced Binary Response — case_weights","title":"Case Weights for Unbalanced Binary Response — case_weights","text":"Case Weights Unbalanced Binary Response","code":""},{"path":"https://blasbenito.github.io/collinear/reference/internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Case Weights for Unbalanced Binary Response — case_weights","text":"","code":"case_weights(x = NULL)"},{"path":"https://blasbenito.github.io/collinear/reference/internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Case Weights for Unbalanced Binary Response — case_weights","text":"x (required, integer vector) Binary response 1s 0s. Default: NULL","code":""},{"path":"https://blasbenito.github.io/collinear/reference/internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Case Weights for Unbalanced Binary Response — case_weights","text":"vector length equal x case weights.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/internal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Case Weights for Unbalanced Binary Response — case_weights","text":"","code":"if(interactive()){   case_weights(    x = c(0, 0, 0, 1, 1)  )   }"},{"path":"https://blasbenito.github.io/collinear/reference/preference_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the preference order for predictors based on a user-defined function. — preference_order","title":"Compute the preference order for predictors based on a user-defined function. — preference_order","text":"Calculates preference order predictors based user-provided function takes predictor, response, data frame arguments. Returns data frame columns \"predictor\" \"preference\". former contains predictors names order, ready argument preference_order cor_select(), vif_select() collinear(). latter contains result function f combination predictor response. Supports parallelization setup via future::plan() progress bars generated progressr package. See examples.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/preference_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the preference order for predictors based on a user-defined function. — preference_order","text":"","code":"preference_order(   df = NULL,   response = NULL,   predictors = NULL,   f = f_rsquared,   encoding_method = \"mean\" )"},{"path":"https://blasbenito.github.io/collinear/reference/preference_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the preference order for predictors based on a user-defined function. — preference_order","text":"df (required; data frame) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (required, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' f (optional: function) function returns value representing relationship given predictor response. Higher values ranked higher. available options : f_rsquared() (default option): returns R-squared correlation numeric response numeric predictor. f_gam_deviance: fits univariate GAM model numeric response numeric predictor return explained deviance. Requires package mgcv. f_rf_rsquared() also named f_rf_deviance(): fits univariate random forest model ranger::ranger() numeric response numeric predictor return R-squared observations --bag predictions. Requires package ranger. f_logistic_auc_balanced(): fits logistic univariate GLM balanced binary response (0s 1s) numeric predictor return Area Curve observations predictors. f_logistic_auc_unbalanced(): fits quasibinomial univariate GLM weighted cases unbalanced binary response (0s 1s) numeric predictor return Area Curve observations predictors. f_gam_auc_balanced(): fits logistic univariate GAM balanced binary response (0s 1s) numeric predictor return Area Curve observations predictors. f_gam_auc_unbalanced(): fits quasibinomial univariate GAM weighted cases unbalanced binary response (0s 1s) numeric predictor return Area Curve observations predictors. f_rf_auc_balanced(): fits random forest model balanced binary response (0s 1s) numeric predictor return Area Curve observations predictors. f_rf_auc_unbalanced(): fits random forest model weighted cases unbalanced binary response (0s 1s) numeric predictor return Area Curve observations predictors. encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/preference_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the preference order for predictors based on a user-defined function. — preference_order","text":"data frame","code":""},{"path":"https://blasbenito.github.io/collinear/reference/preference_order.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the preference order for predictors based on a user-defined function. — preference_order","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/preference_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the preference order for predictors based on a user-defined function. — preference_order","text":"","code":"data(   vi,   vi_predictors )  #subset to limit example run time vi <- vi[1:1000, ] vi_predictors <- vi_predictors[1:20]  #parallelization setup future::plan(   future::multisession,   workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar # progressr::handlers(global = TRUE)  #computing preference order #with response #numeric and categorical predictors in the output #as the R-squared between each predictor and the response preference.order <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rsquared   )  preference.order #>                 predictor  preference #> 1             koppen_zone 0.813706530 #> 2      koppen_description 0.798401085 #> 3                 soil_ph 0.753180652 #> 4                swi_mean 0.743334183 #> 5            koppen_group 0.715080723 #> 6               soil_type 0.646557615 #> 7    soil_temperature_max 0.611299994 #> 8                 swi_max 0.593351577 #> 9  soil_temperature_range 0.541190402 #> 10              swi_range 0.418497231 #> 11                swi_min 0.260662568 #> 12               soil_soc 0.160172083 #> 13         topo_diversity 0.116888153 #> 14   soil_temperature_min 0.089647403 #> 15              soil_clay 0.077514274 #> 16             topo_slope 0.046389046 #> 17              soil_sand 0.043249031 #> 18         topo_elevation 0.029362052 #> 19  soil_temperature_mean 0.023888671 #> 20              soil_silt 0.007505508  #using it in variable selection with collinear() selected.predictors <- cor_select(   df = vi,   response = \"vi_mean\", #don't forget the response!   predictors = vi_predictors,   preference_order = preference.order,   max_cor = 0.75   )  selected.predictors #>  [1] \"koppen_zone\"            \"soil_temperature_max\"   \"soil_temperature_range\" #>  [4] \"swi_range\"              \"soil_soc\"               \"topo_diversity\"         #>  [7] \"soil_clay\"              \"topo_slope\"             \"soil_sand\"              #> [10] \"topo_elevation\"         \"soil_temperature_mean\"   #check their correlations selected.predictors.cor <- cor_df(   df = vi,   response = \"vi_mean\",   predictors = selected.predictors )  #all correlations below max_cor selected.predictors.cor #> # A tibble: 55 × 3 #>    x                      y                      correlation #>    <chr>                  <chr>                        <dbl> #>  1 soil_temperature_max   koppen_zone                 -0.72  #>  2 soil_temperature_range koppen_zone                 -0.698 #>  3 swi_range              koppen_zone                  0.677 #>  4 soil_sand              soil_clay                   -0.675 #>  5 soil_temperature_mean  soil_temperature_max         0.586 #>  6 soil_soc               soil_temperature_max        -0.578 #>  7 topo_slope             topo_diversity               0.538 #>  8 swi_range              soil_temperature_range      -0.5   #>  9 soil_temperature_range soil_temperature_max         0.481 #> 10 soil_temperature_mean  soil_soc                    -0.431 #> # ℹ 45 more rows  #USING A CUSTOM FUNCTION #custom function to compute RMSE between a predictor and a response #x is a predictor name #y is a response name #df is a data frame with multiple predictors and one response #must return a single number, with higher number indicating higher preference #notice we use \"one minus RMSE\" to give higher rank to variables with lower RMSE f_rmse <- function(x, y, df){    xy <- df[, c(x, y)] |>     na.omit() |>     scale()    1 - sqrt(mean((xy[, 1] - xy[, 2])^2))  }  preference.order <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rmse )  preference.order #>                 predictor  preference #> 1             koppen_zone  0.55763087 #> 2      koppen_description  0.53878289 #> 3                swi_mean  0.47522602 #> 4            koppen_group  0.44462415 #> 5               soil_type  0.37435469 #> 6                 swi_max  0.32253839 #> 7               swi_range  0.16007942 #> 8                 swi_min  0.01110232 #> 9                soil_soc -0.09470103 #> 10         topo_diversity -0.14669333 #> 11   soil_temperature_min -0.18312100 #> 12              soil_clay -0.20072025 #> 13             topo_slope -0.25206567 #> 14              soil_silt -0.35089030 #> 15  soil_temperature_mean -0.51881865 #> 16         topo_elevation -0.52982498 #> 17              soil_sand -0.55354823 #> 18 soil_temperature_range -0.86221416 #> 19   soil_temperature_max -0.88683592 #> 20                soil_ph -0.93183434  #disable parallelization future::plan(future::sequential)"},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":null,"dir":"Reference","previous_headings":"","what":"Target encoding of non-numeric variables — target_encoding_lab","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"Target encoding involves replacing values categorical variables numeric ones \"target variable\", usually model's response. Target encoding can useful improving performance machine learning models. function identifies categorical variables input data frame, transforms using set target-encoding methods selected user, returns input data frame newly encoded variables. target encoding methods implemented function : \"rank\": Returns rank group integer, starting 1 rank group lower mean response variable. variables returned method named suffix \"__encoded_rank\". method implemented function target_encoding_rank(). \"mean\": Replaces value categorical variable mean response across category given value belongs . option accepts argument \"white_noise\" limit potential overfitting. variables returned method named suffix \"__encoded_mean\". method implemented function target_encoding_mean(). \"rnorm\": Computes mean standard deviation response group categorical variable, uses rnorm() generate random values normal distribution parameters. argument rnorm_sd_multiplier used multiplier standard deviation control range values produced rnorm() group categorical predictor. variables returned method named suffix \"__encoded_rnorm\".  method implemented function target_encoding_rnorm(). \"loo\": leave-one-method, replaces categorical value mean response variable across cases within group. method supports white_noise argument increase limit potential overfitting. variables returned method named suffix \"__encoded_loo\". method implemented function target_encoding_loo(). methods \"mean\" \"rank\" support white_noise argument, fraction range response variable, maximum possible value white noise added. example, response within 0 1, white_noise 0.25 add every value encoded variable random number selected normal distribution -0.25 0.25. argument helps control potential overfitting induced encoded variable. method \"rnorm\" argument rnorm_sd_multiplier, multiplies standard deviation argument \\link[stats]{rnorm} function control spread encoded values groups. Values smaller 1 reduce spread results, values larger 1 opposite effect.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"","code":"target_encoding_lab(   df = NULL,   response = NULL,   predictors = NULL,   encoding_methods = c(\"mean\", \"rank\", \"loo\", \"rnorm\"),   smoothing = 0,   rnorm_sd_multiplier = 0,   seed = 1,   white_noise = 0,   replace = FALSE,   verbose = TRUE )"},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"df (required; data frame, tibble, sf) training data frame. Default: NULL response (required; character string) Name response. Must column name df. Default: NULL predictors (required; character vector) Names predictors df. character factor predictors processed, returned \"df\" slot function's output.  Default: NULL encoding_methods (optional; character string vector). Name target encoding methods. Default: c(\"mean\", \"mean_smoothing, \"rank\", \"loo\", \"rnorm\") smoothing (optional; numeric) Argument target_encoding_mean() (method \"mean_smoothing\"). Minimum group size keeps mean group. Groups smaller means pulled towards global mean response. Default: 0 rnorm_sd_multiplier (optional; numeric) Numeric multiplier standard deviation group categorical variable, range 0-1. Controls variability encoded variables mitigate potential overfitting. Default: 1 seed (optional; integer) Random seed facilitate reproducibility white_noise 0. Default: 1 white_noise (optional; numeric) Numeric white noise values range 0-1, representing fraction range response added noise encoded variable. Controls variability encoded variables mitigate potential overfitting. Default: 0. replace (optional; logical) TRUE, function replaces categorical variable encoded version, returns input data frame encoded variables instead original ones. Default: FALSE verbose (optional; logical) TRUE, messages generated execution function printed console Default: TRUE","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"input data frame newly encoded columns replace FALSE, input data frame encoded columns TRUE","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"Micci-Barreca, D. (2001) Preprocessing Scheme High-Cardinality Categorical Attributes Classification Prediction Problems. SIGKDD Explor. Newsl. 3, 1, 27-32 doi:10.1145/507533.507538","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_lab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target encoding of non-numeric variables — target_encoding_lab","text":"","code":"data(   vi,   vi_predictors   )  #subset to limit example run time vi <- vi[1:1000, ]  #applying all methods for a continuous response df <- target_encoding_lab(   df = vi,   response = \"vi_mean\",   predictors = \"koppen_zone\",   encoding_methods = c(     \"mean\",     \"rank\",     \"rnorm\",     \"loo\"   ),   rnorm_sd_multiplier = c(0, 0.1, 0.2),   white_noise = c(0, 0.1, 0.2) ) #>  #> Encoding the predictor: koppen_zone #> New encoded predictor: 'koppen_zone__encoded_rank' #> New encoded predictor: 'koppen_zone__encoded_mean' #> New encoded predictor: 'koppen_zone__encoded_loo' #> New encoded predictor: 'koppen_zone__encoded_rank__noise_0.1' #> New encoded predictor: 'koppen_zone__encoded_mean__noise_0.1' #> New encoded predictor: 'koppen_zone__encoded_loo__noise_0.1' #> New encoded predictor: 'koppen_zone__encoded_rank__noise_0.2' #> New encoded predictor: 'koppen_zone__encoded_mean__noise_0.2' #> New encoded predictor: 'koppen_zone__encoded_loo__noise_0.2' #> New encoded predictor: 'koppen_zone__encoded_rnorm' #> New encoded predictor: 'koppen_zone__encoded_rnorm__sd_multiplier_0.1' #> New encoded predictor: 'koppen_zone__encoded_rnorm__sd_multiplier_0.2'  #identify encoded predictors predictors.encoded <- grep(   pattern = \"*__encoded*\",   x = colnames(df),   value = TRUE )  #correlation between encoded predictors and the response stats::cor(   x = df[[\"vi_mean\"]],   y = df[, predictors.encoded],   use = \"pairwise.complete.obs\" ) #>      koppen_zone__encoded_rank koppen_zone__encoded_mean #> [1,]                 0.8859924                 0.9020568 #>      koppen_zone__encoded_loo koppen_zone__encoded_rank__noise_0.1 #> [1,]                0.8964646                            0.8860717 #>      koppen_zone__encoded_mean__noise_0.1 koppen_zone__encoded_loo__noise_0.1 #> [1,]                            0.8828402                           0.8774811 #>      koppen_zone__encoded_rank__noise_0.2 koppen_zone__encoded_mean__noise_0.2 #> [1,]                            0.8861208                            0.8310055 #>      koppen_zone__encoded_loo__noise_0.2 koppen_zone__encoded_rnorm #> [1,]                           0.8260699                  0.9019647 #>      koppen_zone__encoded_rnorm__sd_multiplier_0.1 #> [1,]                                     0.9002496 #>      koppen_zone__encoded_rnorm__sd_multiplier_0.2 #> [1,]                                     0.8962355"},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Target-encoding methods — target_encoding_mean","title":"Target-encoding methods — target_encoding_mean","text":"Methods apply target-encoding individual categorical variables. functions implemented : target_encoding_mean(): group identified mean response group cases. argument smoothing controls pushes mean small groups towards global mean avoid overfitting. White noise can added via white_noise argument. Columns encoded function identified suffix \"__encoded_mean\". white_noise used, amount white noise also added suffix. target_encoding_rank(): group identified rank mean response variable group cases. group lower mean receives rank 1. White noise can added via white_noise argument. Columns encoded function identified suffix \"__encoded_rank\". white_noise used, amount noise also added suffix. target_encoding_rnorm(): case group receives value coming normal distribution mean standard deviation response cases group. argument rnorm_sd_multiplier multiplies standard deviation reduce spread obtained values. Columns encoded function identified suffix \"__encoded_rnorm_rnorm_sd_multiplier_X\", X amount rnorm_sd_multiplier used. target_encoding_loo(): suffix \"loo\" stands \"leave-one-\". case group encoded average response cases group. Columns encoded function identified suffix \"__encoded_loo\".","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target-encoding methods — target_encoding_mean","text":"","code":"target_encoding_mean(   df,   response,   predictor,   smoothing = 0,   white_noise = 0,   seed = 1,   replace = FALSE,   verbose = TRUE )  target_encoding_rnorm(   df,   response,   predictor,   rnorm_sd_multiplier = 1,   seed = 1,   replace = FALSE,   verbose = TRUE )  target_encoding_rank(   df,   response,   predictor,   white_noise = 0,   seed = 1,   replace = FALSE,   verbose = TRUE )  target_encoding_loo(   df,   response,   predictor,   white_noise = 0,   seed = 1,   replace = FALSE,   verbose = TRUE )  add_white_noise(df, response, predictor, white_noise = 0.1, seed = 1)"},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target-encoding methods — target_encoding_mean","text":"df (required; data frame, tibble, sf) training data frame. Default: NULL response (required; character string) Name response. Must column name df. Default: NULL predictor (required; character) Name categorical variable encode. Default: NULL smoothing (optional; numeric) Argument target_encoding_mean(). Minimum group size keeps mean group. Groups smaller means pulled towards global mean response. Default: 0. white_noise (optional; numeric) Numeric white noise values range 0-1, representing fraction range response added noise encoded variable. Controls variability encoded variables mitigate potential overfitting. Default: 0. seed (optional; integer) Random seed facilitate reproducibility. Default: 1 replace (optional; logical) Advanced option changes behavior function. Use really know exactly need. TRUE, replaces categorical variable encoded version, returns input data frame replaced variables. verbose (optional; logical) TRUE, messages plots generated execution function displayed. Default: TRUE rnorm_sd_multiplier (optional; numeric) Numeric multiplier standard deviation group categorical variable, range 0-1. Controls variability encoded variables mitigate potential overfitting. Default: 1","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target-encoding methods — target_encoding_mean","text":"input data frame target-encoded variable.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Target-encoding methods — target_encoding_mean","text":"Micci-Barreca, D. (2001) Preprocessing Scheme High-Cardinality Categorical Attributes Classification Prediction Problems. SIGKDD Explor. Newsl. 3, 1, 27-32 doi:10.1145/507533.507538","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Target-encoding methods — target_encoding_mean","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/target_encoding_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target-encoding methods — target_encoding_mean","text":"","code":"data(vi)  #subset to limit example run time vi <- vi[1:1000, ]  #mean encoding #-------------  #without noise df <- target_encoding_mean(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )   #with noise df <- target_encoding_mean(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   white_noise = 0.1,   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )    #group rank #----------  df <- target_encoding_rank(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )    #leave-one-out #-------------  #without noise df <- target_encoding_loo(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )   #with noise df <- target_encoding_loo(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   white_noise = 0.1,   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )    #rnorm #-----  #without sd multiplier df <- target_encoding_rnorm(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )   #with sd multiplier df <- target_encoding_rnorm(   df = vi,   response = \"vi_mean\",   predictor = \"soil_type\",   rnorm_sd_multiplier = 0.1,   replace = TRUE )  plot(   x = df$soil_type,   y = df$vi_mean,   xlab = \"encoded variable\",   ylab = \"response\" )"},{"path":"https://blasbenito.github.io/collinear/reference/toy.html","id":null,"dir":"Reference","previous_headings":"","what":"One response and four predictors with varying levels of multicollinearity — toy","title":"One response and four predictors with varying levels of multicollinearity — toy","text":"Data frame known relationship responses predictors useful illustrate multicollinearity concepts. Created vi using code shown example.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/toy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One response and four predictors with varying levels of multicollinearity — toy","text":"","code":"data(toy)"},{"path":"https://blasbenito.github.io/collinear/reference/toy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"One response and four predictors with varying levels of multicollinearity — toy","text":"Data frame 2000 rows 5 columns.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/toy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One response and four predictors with varying levels of multicollinearity — toy","text":"Columns: y: response variable generated * 0.75 + b * 0.25 + noise. : important predictor y, uncorrelated b. b: second important predictor y, uncorrelated . c: generated + noise. d: generated (+ b)/2 + noise. variance inflation factors predictors toy. variable vif b       4.062 d       6.804 c       13.263       16.161","code":""},{"path":"https://blasbenito.github.io/collinear/reference/toy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One response and four predictors with varying levels of multicollinearity — toy","text":"","code":"library(collinear) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data(vi) set.seed(1) toy <- vi |>   dplyr::slice_sample(n = 2000) |>   dplyr::transmute(     a = soil_clay,     b = humidity_range   ) |>   scale() |>   as.data.frame() |>   dplyr::mutate(     y = a * 0.75 + b * 0.25 + runif(n = dplyr::n(), min = -0.5, max = 0.5),     c = a + runif(n = dplyr::n(), min = -0.5, max = 0.5),     d = (a + b) / 2 + runif(n = dplyr::n(), min = -0.5, max = 0.5)   ) |>   dplyr::transmute(y, a, b, c, d)"},{"path":"https://blasbenito.github.io/collinear/reference/validate_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate input data frame — validate_df","title":"Validate input data frame — validate_df","text":"Internal function validate prepare input data frame multicollinearity analysis. Validates data frame ensure complies requirements package functions. function performs following actions: Stops 'df' NULL. Stops 'df' coerced data frame. Stops 'df' zero rows. Removes geometry column input data frame \"sf\" object. Removes non-numeric columns many unique values rows df . Print messages number rows 'df' lower 'min_rows'. Converts logical columns numeric. Converts factor ordered columns character. Tags data frame attribute validated = TRUE let package functions skip data validation.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate input data frame — validate_df","text":"","code":"validate_df(df = NULL, min_rows = 30)"},{"path":"https://blasbenito.github.io/collinear/reference/validate_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate input data frame — validate_df","text":"df (required; data frame matrix) Input data frame. Default: NULL min_rows (required; integer) Minimum number rows required pairwise correlation variance inflation factor analysis. Default: 30","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate input data frame — validate_df","text":"input data frame modified comply requirements functions package","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validate input data frame — validate_df","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate input data frame — validate_df","text":"","code":"data(vi)  #validating example data frame vi <- validate_df(   df = vi )  #tagged as validated attributes(vi)$validated #> [1] TRUE"},{"path":"https://blasbenito.github.io/collinear/reference/validate_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the 'predictors' argument for analysis — validate_predictors","title":"Validate the 'predictors' argument for analysis — validate_predictors","text":"Requires argument 'df' validated validate_df(). Validates 'predictors' argument ensure complies requirements package functions. performs following actions: Stops 'df' NULL. Stops 'df' validated. 'predictors' NULL, uses column names 'df' 'predictors' 'df' data frame. Print message names 'predictors' column names 'df', returns ones 'df'. Stop number numeric columns 'predictors' smaller 'min_numerics'. Print message zero-variance columns 'predictors' returns new 'predictors' argument without . Tags vector attribute validated = TRUE let package functions skip data validation.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the 'predictors' argument for analysis — validate_predictors","text":"","code":"validate_predictors(   df = NULL,   response = NULL,   predictors = NULL,   decimals = 4 )"},{"path":"https://blasbenito.github.io/collinear/reference/validate_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the 'predictors' argument for analysis — validate_predictors","text":"df (required; data frame) validated data frame numeric /character predictors, optionally, response variable. Default: NULL. response (optional, character string) Name numeric response variable. Used remove response predictors predictors NULL. Character response variables ignored. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:NULL decimals (required, integer) Number decimal places zero variance test. Smaller numbers increase number variables detected near-zero variance. Recommended values depend range numeric variables 'df'. Default: 4","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the 'predictors' argument for analysis — validate_predictors","text":"character vector validated predictor names","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_predictors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validate the 'predictors' argument for analysis — validate_predictors","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate the 'predictors' argument for analysis — validate_predictors","text":"","code":"data(   vi,   vi_predictors   )  #validating example data frame vi <- validate_df(   df = vi )  #validating example predictors vi_predictors <- validate_predictors(   df = vi,   predictors = vi_predictors )  #tagged as validated attributes(vi_predictors)$validated #> [1] TRUE"},{"path":"https://blasbenito.github.io/collinear/reference/validate_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","title":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","text":"Requires argument 'df' validated validate_df().","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","text":"","code":"validate_response(df = NULL, response = NULL, decimals = 4)"},{"path":"https://blasbenito.github.io/collinear/reference/validate_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","text":"df (required; data frame) validated data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (optional, character string) Name numeric response variable. Character response variables ignored. Default: NULL. decimals (required, integer) number decimal places zero variance test. Default: 4","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","text":"character string name response","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_response.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","text":"Blas M. Benito","code":""},{"path":"https://blasbenito.github.io/collinear/reference/validate_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate the 'response' argument for target encoding of non-numeric variables — validate_response","text":"","code":"data(   vi )  #validating example data frame vi <- validate_df(   df = vi )  #validating example predictors response <- validate_response(   df = vi,   response = \"vi_mean\" )  #tagged as validated attributes(response)$validated #> [1] TRUE"},{"path":"https://blasbenito.github.io/collinear/reference/vi.html","id":null,"dir":"Reference","previous_headings":"","what":"30.000 records of responses and predictors all over the world — vi","title":"30.000 records of responses and predictors all over the world — vi","text":"30.000 records responses predictors world","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"30.000 records of responses and predictors all over the world — vi","text":"","code":"data(vi)"},{"path":"https://blasbenito.github.io/collinear/reference/vi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"30.000 records of responses and predictors all over the world — vi","text":"Data frame 30.000 rows 68 columns.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/collinear/reference/vi_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictor names in data frame 'vi' — vi_predictors","title":"Predictor names in data frame 'vi' — vi_predictors","text":"Predictor names data frame 'vi'","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vi_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictor names in data frame 'vi' — vi_predictors","text":"","code":"data(vi_predictors)"},{"path":"https://blasbenito.github.io/collinear/reference/vi_predictors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Predictor names in data frame 'vi' — vi_predictors","text":"Character vector predictor names.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/collinear/reference/vif_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance Inflation Factor — vif_df","title":"Variance Inflation Factor — vif_df","text":"Computes Variance Inflation Factor variables training data frame. Warning: predictors perfect correlation might cause errors, please use cor_select() remove perfect correlations first. Variance Inflation Factor given variable y computed 1/(1-R2), R2 multiple R-squared multiple regression model fitted using y response remaining variables input data set predictors. equation can interpreted \"rate perfect model's R-squared unexplained variance model\". possible range VIF values (1, Inf]. VIF lower 10 suggest removing y data set reduce overall multicollinearity. function computes Variance Inflation Factor (VIF) two steps: Applies \\link[base]{solve} obtain precision matrix, inverse covariance matrix. Uses \\link[base]{diag} extract diagonal precision matrix, contains variance prediction predictor predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance Inflation Factor — vif_df","text":"","code":"vif_df(df = NULL, response = NULL, predictors = NULL, encoding_method = \"mean\")"},{"path":"https://blasbenito.github.io/collinear/reference/vif_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance Inflation Factor — vif_df","text":"df (required; data frame) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance Inflation Factor — vif_df","text":"Data frame predictor names VIF values","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variance Inflation Factor — vif_df","text":"Blas M. Benito David . Belsley, D.., Kuh, E., Welsch, R.E. (1980). Regression Diagnostics: Identifying Influential Data Sources Collinearity. John Wiley & Sons. doi:10.1002/0471725153 .","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance Inflation Factor — vif_df","text":"","code":"data(   vi,   vi_predictors )  #subset to limit example run time vi <- vi[1:1000, ]  #reduce correlation in predictors with cor_select() vi_predictors <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_cor = 0.75 )  #without response #only numeric predictors are returned df <- vif_df(   df = vi,   predictors = vi_predictors )  df #>                      variable    vif #> 1                   soil_clay  1.392 #> 2              topo_diversity  1.582 #> 3                 country_gdp  1.833 #> 4                  topo_slope  1.841 #> 5                   soil_silt  1.968 #> 6          country_population  1.999 #> 7                    soil_soc  2.615 #> 8                rainfall_min  2.789 #> 9              rainfall_range  3.034 #> 10             humidity_range  3.242 #> 11                  swi_range  3.287 #> 12             topo_elevation  3.570 #> 13                    swi_min  3.890 #> 14              soil_nitrogen  4.149 #> 15 growing_season_temperature  4.594 #> 16          cloud_cover_range  4.773 #> 17    temperature_seasonality  6.025 #> 18              solar_rad_max  6.622 #> 19            temperature_max  8.678 #> 20            cloud_cover_min  8.871 #> 21               humidity_max  9.117 #> 22             solar_rad_mean 10.467  #with response #categorical and numeric predictors are returned df <- vif_df(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors )  df #>                      variable    vif #> 1              country_income  1.331 #> 2                   soil_clay  1.441 #> 3              topo_diversity  1.616 #> 4                  topo_slope  1.884 #> 5                 country_gdp  1.932 #> 6          country_population  2.177 #> 7                   soil_silt  2.199 #> 8                   continent  2.327 #> 9                    soil_soc  2.689 #> 10               rainfall_min  2.806 #> 11                  soil_type  3.174 #> 12             rainfall_range  3.242 #> 13                  subregion  3.361 #> 14             humidity_range  3.471 #> 15               biogeo_realm  3.611 #> 16             topo_elevation  3.675 #> 17              soil_nitrogen  4.286 #> 18                  swi_range  4.647 #> 19                    swi_min  4.769 #> 20               koppen_group  4.923 #> 21          cloud_cover_range  4.967 #> 22 growing_season_temperature  5.220 #> 23    temperature_seasonality  6.711 #> 24              solar_rad_max  6.981 #> 25            cloud_cover_min  9.341 #> 26            temperature_max  9.371 #> 27               humidity_max  9.400 #> 28             solar_rad_mean 10.671"},{"path":"https://blasbenito.github.io/collinear/reference/vif_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","title":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","text":"Automates multicollinearity management selecting variables based Variance Inflation Factor (VIF). Warning: predictors perfect correlation might cause errors, please use cor_select() remove perfect correlations first. vif_select() function designed automate reduction multicollinearity set predictors using Variance Inflation Factors. 'response' argument provided, categorical predictors converted numeric via target encoding (see target_encoding_lab()). 'response' argument provided, categorical variables ignored. Variance Inflation Factor given variable y computed 1/(1-R2), R2 multiple R-squared multiple regression model fitted using y response predictors input data frame predictors. VIF equation can interpreted \"rate perfect model's R-squared unexplained variance model\". possible range VIF values (1, Inf]. VIF lower 10 suggest removing y data set reduce overall multicollinearity. recommended thresholds maximum VIF may vary depending source consulted, common values, 2.5, 5, 10. function vif_select() applies recursive algorithm remove variables VIF higher given threshold (defined argument max_vif). argument response provided, non-numeric variables predictors transformed numeric using target encoding (see target_encoding_lab()). Otherwise, non-numeric variables ignored. argument preference_order allows defining preference selection order preserve (possible) variables might interesting even required given analysis. example, predictors c(\"\", \"b\", \"c\") preference_order c(\"\", \"b\"), two possibilities: VIF \"\" higher VIF \"b\", VIF values max_vif, \"\" selected \"b\" removed. correlation equal max_cor, \"\" selected, matter correlation \"c\", preference_order provided, predictors ranked variance inflation factor computed vif_df().","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","text":"","code":"vif_select(   df = NULL,   response = NULL,   predictors = NULL,   preference_order = NULL,   max_vif = 5,   encoding_method = \"mean\" )"},{"path":"https://blasbenito.github.io/collinear/reference/vif_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","text":"df (required; data frame) data frame numeric /character predictors predictors, optionally, response variable. Default: NULL. response (recommended, character string) Name numeric response variable. Character response variables ignored. Please, see 'Details' better understand providing argument leads different results character variables 'predictors'. Default: NULL. predictors (optional; character vector) character vector predictor names 'df'. omitted, columns 'df' used predictors. Default:'NULL' preference_order (optional; character vector) vector column names 'predictors' desired preference order, result function preference_order(). Allows defining priority order selecting predictors, can particularly useful predictors critical analysis others. Predictors included argument ranked Variance Inflation Factor. Default: NULL. max_vif (optional, numeric) Numeric recommended values 2.5 10 defining maximum VIF allowed given predictor output dataset. Higher VIF thresholds result higher number selected variables. Default: 5. encoding_method (optional; character string). Name target encoding method convert character factor predictors numeric. One \"mean\", \"rank\", \"loo\", \"rnorm\" (see target_encoding_lab() details). Default: \"mean\"","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","text":"Character vector names selected predictors.","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_select.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","text":"Blas M. Benito David . Belsley, D.., Kuh, E., Welsch, R.E. (1980). Regression Diagnostics: Identifying Influential Data Sources Collinearity. John Wiley & Sons. doi:10.1002/0471725153 .","code":""},{"path":"https://blasbenito.github.io/collinear/reference/vif_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automated multicollinearity reduction via Variance Inflation Factor — vif_select","text":"","code":"data(   vi,   vi_predictors )  #subset to limit example run time vi <- vi[1:1000, ] vi_predictors <- vi_predictors[1:10]  #reduce correlation in predictors with cor_select() vi_predictors <- cor_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_cor = 0.75 )  #without response #without preference_order #permissive max_vif #only numeric predictors are processed selected.predictors <- vif_select(   df = vi,   predictors = vi_predictors,   max_vif = 10 )  selected.predictors #> [1] \"topo_elevation\" \"topo_diversity\" \"topo_slope\"     \"swi_max\"        #> [5] \"swi_min\"         #without response #without preference_order #restrictive max_vif #only numeric predictors are processed selected.predictors <- vif_select(   df = vi,   predictors = vi_predictors,   max_vif = 2.5 )  selected.predictors #> [1] \"topo_elevation\" \"topo_diversity\" \"topo_slope\"     \"swi_max\"        #> [5] \"swi_min\"         #with response #without preference_order #restrictive max_cor #slightly different solution than previous one #because categorical variables are target-enccoded selected.predictors <- vif_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   max_vif = 2.5 )  selected.predictors #> [1] \"topo_elevation\" \"topo_diversity\" \"topo_slope\"     \"swi_min\"        #> [5] \"soil_type\"       #with response #with user-defined preference_order #restrictive max_cor #numerics and categorical variables in output selected.predictors <- vif_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = c(     \"soil_type\", #categorical variable     \"soil_temperature_mean\",     \"swi_mean\",     \"rainfall_mean\",     \"evapotranspiration_mean\"   ),   max_vif = 2.5 )  selected.predictors #> [1] \"soil_type\"      \"topo_elevation\" \"topo_diversity\" \"topo_slope\"     #> [5] \"swi_min\"          #with response #with automated preference_order #restrictive max_cor and max_vif #numerics and categorical variables in output preference.order <- preference_order(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   f = f_rsquared #cor(response, predictor) )  head(preference.order) #>        predictor preference #> 1      soil_type 0.64655761 #> 2        swi_max 0.59335158 #> 3        swi_min 0.26066257 #> 4 topo_diversity 0.11688815 #> 5     topo_slope 0.04638905 #> 6 topo_elevation 0.02936205  selected.predictors <- vif_select(   df = vi,   response = \"vi_mean\",   predictors = vi_predictors,   preference_order = preference.order,   max_vif = 2.5 )  selected.predictors #> [1] \"soil_type\"      \"swi_min\"        \"topo_diversity\" \"topo_slope\"     #> [5] \"topo_elevation\""},{"path":"https://blasbenito.github.io/collinear/news/index.html","id":"collinear-112","dir":"Changelog","previous_headings":"","what":"collinear 1.1.2","title":"collinear 1.1.2","text":"functions cor_select(), vif_select() vif_df() now skip analysis one predictor available. may happen collinear() highly correlated datasets, cor_select() returns one predictor sends vif_select(). warnings data validation functions now messages ensure printed correct order. Function vif_df() now internal function vif_f() compute vif data frame, function applied twice, without modifying correlation matrix, fails, replacing 1 -1 0.999 -0.999 correlation matrix try overcome “singular matrix” issue. function validate_df() now takes account number predictors reference, along min_rows, warn user potential issues multicollinearity analysis due data frame dimensions. function preference_order() longer workers argument, can accept parallelization setup via future::plan() progress bar via de progressr package.","code":""},{"path":"https://blasbenito.github.io/collinear/news/index.html","id":"collinear-111","dir":"Changelog","previous_headings":"","what":"collinear 1.1.1","title":"collinear 1.1.1","text":"CRAN release: 2023-12-08 Hotfix issue solve(tol = 0) systems large double support (noLD). one wasn’t fun.","code":""},{"path":"https://blasbenito.github.io/collinear/news/index.html","id":"collinear-110","dir":"Changelog","previous_headings":"","what":"collinear 1.1.0","title":"collinear 1.1.0","text":"CRAN release: 2023-11-30 Added argument “smoothing” target_encoding_mean() function implement original target encoding method. Added alias f_rf_rsquared() function f_rf_deviance(). Added column “vi_binary” vi binary version “vi_mean”. Added function auc_score() compute area curve predictions binary models. Added function case_weights() compute case weights binary responses unbalanced. Added function f_rf_auc_balanced() used input f argument preference_order() response binary balanced. Added function f_rf_auc_unbalanced() used input f argument preference_order() response binary unbalanced. Added function f_gam_auc_balanced() used input f argument preference_order() response binary balanced. Added function f_gam_auc_unbalanced() used input f argument preference_order() response binary unbalanced. Added function f_logistic_auc_balanced() used input f argument preference_order() response binary balanced. Added function f_logistic_auc_unbalanced() used input f argument preference_order() response binary unbalanced. Fixed issue perfect correlations vif_df(). Now perfect correlations replaced 0.99 (correlation == 1) -0.99 (correlation == -1) correlation matrix avoid errors solve(). Added example dataset toy, derived vi, known relationships variables. Fixed issue function cor_df() many cases lost logic remove diagonals flawed, pairs correlation == 1 removed. Fixed issue functions cor_select() vif_select() ignoring predictors using df lead empty selections.","code":""},{"path":"https://blasbenito.github.io/collinear/news/index.html","id":"collinear-102","dir":"Changelog","previous_headings":"","what":"collinear 1.0.2","title":"collinear 1.0.2","text":"version fixes bugs two functions: cor_select() cor_df() cor_select() one variable left correlation matrix, one column matrix became vector colnames, yielded error. Now, avoid issue, drop = FALSE used matrix subsetting. previous version started removing predictors backwards fashion, last predictor preference order, moving one one top. wrong circumstances (low number predictors, low cor_max, high correlation first second predictors preference order) configuration lead keep first predictor, even others comply max_cor restriction lower preference order. new version produces smaller subsets predictors higher diversity. cor_df() data frame returned pairs variable cor_method “spearman”. Fixed dplyr::filter(x != y).","code":""},{"path":"https://blasbenito.github.io/collinear/news/index.html","id":"collinear-101","dir":"Changelog","previous_headings":"","what":"collinear 1.0.1","title":"collinear 1.0.1","text":"CRAN release: 2023-10-24 Re-submission minor CRAN comments. Changes: version number bumped 1.0.1 removed (interactive()){} @examples. removed plot() call @examples function target_encoding_lab() messing pkgdown’s build. piece code triggered comment “Please always make sure reset user’s options()” reviewer, solve issue. made sure examples run less 5 seconds. fixed bug functions include response predictor ‘predictors = NULL’ ‘response’ valid column input data frame.","code":""},{"path":"https://blasbenito.github.io/collinear/news/index.html","id":"collinear-100","dir":"Changelog","previous_headings":"","what":"collinear 1.0.0","title":"collinear 1.0.0","text":"First functional version package submitted CRAN.","code":""}]
